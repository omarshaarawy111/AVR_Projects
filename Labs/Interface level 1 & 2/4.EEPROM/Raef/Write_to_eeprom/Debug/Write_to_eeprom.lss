
Write_to_eeprom.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000192  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000540  00000000  00000000  000001e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      000006d8  00000000  00000000  00000728  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 8c 00 	call	0x118	; 0x118 <main>
  64:	0c 94 c7 00 	jmp	0x18e	; 0x18e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <EEPROM_write>:



#include <avr/io.h>
void EEPROM_write(unsigned short address, unsigned char data )
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	00 d0       	rcall	.+0      	; 0x72 <EEPROM_write+0x6>
  72:	0f 92       	push	r0
  74:	cd b7       	in	r28, 0x3d	; 61
  76:	de b7       	in	r29, 0x3e	; 62
  78:	9a 83       	std	Y+2, r25	; 0x02
  7a:	89 83       	std	Y+1, r24	; 0x01
  7c:	6b 83       	std	Y+3, r22	; 0x03
	/*set up address register*/
	EEARL=(char)address;
  7e:	ee e3       	ldi	r30, 0x3E	; 62
  80:	f0 e0       	ldi	r31, 0x00	; 0
  82:	89 81       	ldd	r24, Y+1	; 0x01
  84:	80 83       	st	Z, r24
	EEARH=(char)(address>>8);
  86:	ef e3       	ldi	r30, 0x3F	; 63
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	89 81       	ldd	r24, Y+1	; 0x01
  8c:	9a 81       	ldd	r25, Y+2	; 0x02
  8e:	89 2f       	mov	r24, r25
  90:	99 27       	eor	r25, r25
  92:	80 83       	st	Z, r24
	/*set up data register*/
	EEDR=data ;
  94:	ed e3       	ldi	r30, 0x3D	; 61
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	8b 81       	ldd	r24, Y+3	; 0x03
  9a:	80 83       	st	Z, r24
	/*write logical one to EEMWE*/
	EECR|=(1<<EEMWE);
  9c:	ac e3       	ldi	r26, 0x3C	; 60
  9e:	b0 e0       	ldi	r27, 0x00	; 0
  a0:	ec e3       	ldi	r30, 0x3C	; 60
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	80 81       	ld	r24, Z
  a6:	84 60       	ori	r24, 0x04	; 4
  a8:	8c 93       	st	X, r24
	/*start EEPROM write by setting EEWE*/
	EECR|=(1<<EEWE);
  aa:	ac e3       	ldi	r26, 0x3C	; 60
  ac:	b0 e0       	ldi	r27, 0x00	; 0
  ae:	ec e3       	ldi	r30, 0x3C	; 60
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	80 81       	ld	r24, Z
  b4:	82 60       	ori	r24, 0x02	; 2
  b6:	8c 93       	st	X, r24
	/* wait for completion of write operation*/
	while((EECR &(1<<EEWE)>>EEWE)==1);
  b8:	ec e3       	ldi	r30, 0x3C	; 60
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	80 81       	ld	r24, Z
  be:	88 2f       	mov	r24, r24
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	81 70       	andi	r24, 0x01	; 1
  c4:	90 70       	andi	r25, 0x00	; 0
  c6:	88 23       	and	r24, r24
  c8:	b9 f7       	brne	.-18     	; 0xb8 <EEPROM_write+0x4c>

}
  ca:	0f 90       	pop	r0
  cc:	0f 90       	pop	r0
  ce:	0f 90       	pop	r0
  d0:	cf 91       	pop	r28
  d2:	df 91       	pop	r29
  d4:	08 95       	ret

000000d6 <EEPROM_read>:
unsigned char EEPROM_read( unsigned short address )
{
  d6:	df 93       	push	r29
  d8:	cf 93       	push	r28
  da:	00 d0       	rcall	.+0      	; 0xdc <EEPROM_read+0x6>
  dc:	cd b7       	in	r28, 0x3d	; 61
  de:	de b7       	in	r29, 0x3e	; 62
  e0:	9a 83       	std	Y+2, r25	; 0x02
  e2:	89 83       	std	Y+1, r24	; 0x01
	/*set up address register*/
	EEARL=(char)address;
  e4:	ee e3       	ldi	r30, 0x3E	; 62
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	89 81       	ldd	r24, Y+1	; 0x01
  ea:	80 83       	st	Z, r24
	EEARH=(char)(address>>8);
  ec:	ef e3       	ldi	r30, 0x3F	; 63
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	89 81       	ldd	r24, Y+1	; 0x01
  f2:	9a 81       	ldd	r25, Y+2	; 0x02
  f4:	89 2f       	mov	r24, r25
  f6:	99 27       	eor	r25, r25
  f8:	80 83       	st	Z, r24
	/*start EEPROM read by setting EERE*/
	EECR|=(1<<EERE);
  fa:	ac e3       	ldi	r26, 0x3C	; 60
  fc:	b0 e0       	ldi	r27, 0x00	; 0
  fe:	ec e3       	ldi	r30, 0x3C	; 60
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	80 81       	ld	r24, Z
 104:	81 60       	ori	r24, 0x01	; 1
 106:	8c 93       	st	X, r24
	/*return data from data register*/
	return EEDR ;
 108:	ed e3       	ldi	r30, 0x3D	; 61
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	80 81       	ld	r24, Z
}
 10e:	0f 90       	pop	r0
 110:	0f 90       	pop	r0
 112:	cf 91       	pop	r28
 114:	df 91       	pop	r29
 116:	08 95       	ret

00000118 <main>:


#include "EEprom.h"
#include <avr/io.h>
int main(void)
{
 118:	df 93       	push	r29
 11a:	cf 93       	push	r28
 11c:	cd b7       	in	r28, 0x3d	; 61
 11e:	de b7       	in	r29, 0x3e	; 62
  DDRD|=(1<<0)|(1<<1);
 120:	a1 e3       	ldi	r26, 0x31	; 49
 122:	b0 e0       	ldi	r27, 0x00	; 0
 124:	e1 e3       	ldi	r30, 0x31	; 49
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	83 60       	ori	r24, 0x03	; 3
 12c:	8c 93       	st	X, r24
  PORTD&=~((1<<0)|(1<<1));
 12e:	a2 e3       	ldi	r26, 0x32	; 50
 130:	b0 e0       	ldi	r27, 0x00	; 0
 132:	e2 e3       	ldi	r30, 0x32	; 50
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	80 81       	ld	r24, Z
 138:	8c 7f       	andi	r24, 0xFC	; 252
 13a:	8c 93       	st	X, r24
  EEPROM_write(0x0030,0x50);
 13c:	80 e3       	ldi	r24, 0x30	; 48
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	60 e5       	ldi	r22, 0x50	; 80
 142:	0e 94 36 00 	call	0x6c	; 0x6c <EEPROM_write>

	if (EEPROM_read(0X0030)==0X50)
 146:	80 e3       	ldi	r24, 0x30	; 48
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	0e 94 6b 00 	call	0xd6	; 0xd6 <EEPROM_read>
 14e:	80 35       	cpi	r24, 0x50	; 80
 150:	41 f4       	brne	.+16     	; 0x162 <main+0x4a>
	{
		PORTD|=(1<<0);
 152:	a2 e3       	ldi	r26, 0x32	; 50
 154:	b0 e0       	ldi	r27, 0x00	; 0
 156:	e2 e3       	ldi	r30, 0x32	; 50
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	80 81       	ld	r24, Z
 15c:	81 60       	ori	r24, 0x01	; 1
 15e:	8c 93       	st	X, r24
 160:	15 c0       	rjmp	.+42     	; 0x18c <main+0x74>
	}
	else if(EEPROM_read(0X0030)==0x51)
 162:	80 e3       	ldi	r24, 0x30	; 48
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	0e 94 6b 00 	call	0xd6	; 0xd6 <EEPROM_read>
 16a:	81 35       	cpi	r24, 0x51	; 81
 16c:	41 f4       	brne	.+16     	; 0x17e <main+0x66>
	{
		PORTD|=(1<<1);
 16e:	a2 e3       	ldi	r26, 0x32	; 50
 170:	b0 e0       	ldi	r27, 0x00	; 0
 172:	e2 e3       	ldi	r30, 0x32	; 50
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	80 81       	ld	r24, Z
 178:	82 60       	ori	r24, 0x02	; 2
 17a:	8c 93       	st	X, r24
 17c:	07 c0       	rjmp	.+14     	; 0x18c <main+0x74>

	}
	else
	{
		  PORTD&=~((1<<0)|(1<<1));
 17e:	a2 e3       	ldi	r26, 0x32	; 50
 180:	b0 e0       	ldi	r27, 0x00	; 0
 182:	e2 e3       	ldi	r30, 0x32	; 50
 184:	f0 e0       	ldi	r31, 0x00	; 0
 186:	80 81       	ld	r24, Z
 188:	8c 7f       	andi	r24, 0xFC	; 252
 18a:	8c 93       	st	X, r24
 18c:	ff cf       	rjmp	.-2      	; 0x18c <main+0x74>

0000018e <_exit>:
 18e:	f8 94       	cli

00000190 <__stop_program>:
 190:	ff cf       	rjmp	.-2      	; 0x190 <__stop_program>
