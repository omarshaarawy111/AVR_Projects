
ADC using potentiometer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000064a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  0000064a  000006be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  000006c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000d8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000e0  00000000  00000000  00000e18  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000782  00000000  00000000  00000ef8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000212  00000000  00000000  0000167a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004f8  00000000  00000000  0000188c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000140  00000000  00000000  00001d84  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000282  00000000  00000000  00001ec4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000592  00000000  00000000  00002146  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e4       	ldi	r30, 0x4A	; 74
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 23 03 	jmp	0x646	; 0x646 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include <avr/io.h>
#include "LED.h"
#include "ADC_driver.h"
int main(void)
{
	ADC_vinit();
  92:	0e 94 6f 00 	call	0xde	; 0xde <ADC_vinit>
	LED_vInit('D',0);
  96:	84 e4       	ldi	r24, 0x44	; 68
  98:	60 e0       	ldi	r22, 0x00	; 0
  9a:	0e 94 14 03 	call	0x628	; 0x628 <LED_vInit>
	LED_vInit('D',1);
  9e:	84 e4       	ldi	r24, 0x44	; 68
  a0:	61 e0       	ldi	r22, 0x01	; 1
  a2:	0e 94 14 03 	call	0x628	; 0x628 <LED_vInit>
	LED_vInit('D',2);
  a6:	84 e4       	ldi	r24, 0x44	; 68
  a8:	62 e0       	ldi	r22, 0x02	; 2
  aa:	0e 94 14 03 	call	0x628	; 0x628 <LED_vInit>
	LED_vInit('D',3);
  ae:	84 e4       	ldi	r24, 0x44	; 68
  b0:	63 e0       	ldi	r22, 0x03	; 3
  b2:	0e 94 14 03 	call	0x628	; 0x628 <LED_vInit>
	LED_vInit('D',4);
  b6:	84 e4       	ldi	r24, 0x44	; 68
  b8:	64 e0       	ldi	r22, 0x04	; 4
  ba:	0e 94 14 03 	call	0x628	; 0x628 <LED_vInit>
	LED_vInit('D',5);
  be:	84 e4       	ldi	r24, 0x44	; 68
  c0:	65 e0       	ldi	r22, 0x05	; 5
  c2:	0e 94 14 03 	call	0x628	; 0x628 <LED_vInit>
	LED_vInit('D',6);
  c6:	84 e4       	ldi	r24, 0x44	; 68
  c8:	66 e0       	ldi	r22, 0x06	; 6
  ca:	0e 94 14 03 	call	0x628	; 0x628 <LED_vInit>
	LED_vInit('D',7);
  ce:	84 e4       	ldi	r24, 0x44	; 68
  d0:	67 e0       	ldi	r22, 0x07	; 7
  d2:	0e 94 14 03 	call	0x628	; 0x628 <LED_vInit>
	
    while(1)
    {
    PORTD=ADC_u16Read();   
  d6:	0e 94 74 00 	call	0xe8	; 0xe8 <ADC_u16Read>
  da:	82 bb       	out	0x12, r24	; 18
  dc:	fc cf       	rjmp	.-8      	; 0xd6 <main+0x44>

000000de <ADC_vinit>:
 */ 
#include <avr/io.h>
#include "std_macros.h"
void ADC_vinit(void)
{
	SET_BIT(ADMUX,REFS0); //configure VREF
  de:	3e 9a       	sbi	0x07, 6	; 7
	SET_BIT(ADCSRA,ADEN); // ENable ADC
  e0:	37 9a       	sbi	0x06, 7	; 6
	/* adjust ADC clock*/
	SET_BIT(ADCSRA,ADPS2);
  e2:	32 9a       	sbi	0x06, 2	; 6
	SET_BIT(ADCSRA,ADPS1);
  e4:	31 9a       	sbi	0x06, 1	; 6
}
  e6:	08 95       	ret

000000e8 <ADC_u16Read>:
unsigned short ADC_u16Read(void)
{
	unsigned short read_val;
	
	SET_BIT(ADCSRA,ADSC);
  e8:	36 9a       	sbi	0x06, 6	; 6
	while(IS_BIT_CLR(ADCSRA,ADIF));//stay in your position till ADIF become 1
  ea:	34 9b       	sbis	0x06, 4	; 6
  ec:	fe cf       	rjmp	.-4      	; 0xea <ADC_u16Read+0x2>
	SET_BIT(ADCSRA,ADIF); // clear ADIF
  ee:	34 9a       	sbi	0x06, 4	; 6
	read_val=(ADCL);
  f0:	84 b1       	in	r24, 0x04	; 4
  f2:	90 e0       	ldi	r25, 0x00	; 0
	read_val|=(ADCH<<8);
  f4:	45 b1       	in	r20, 0x05	; 5
  f6:	34 2f       	mov	r19, r20
  f8:	20 e0       	ldi	r18, 0x00	; 0
  fa:	82 2b       	or	r24, r18
  fc:	93 2b       	or	r25, r19
	return read_val ;
  fe:	08 95       	ret

00000100 <DIO_vsetPINDir>:
#include <avr/io.h>

#include "std_macros.h"
void DIO_vsetPINDir(char portname,char pinnumber,char direction)
{
	switch(portname)
 100:	82 34       	cpi	r24, 0x42	; 66
 102:	51 f1       	breq	.+84     	; 0x158 <DIO_vsetPINDir+0x58>
 104:	83 34       	cpi	r24, 0x43	; 67
 106:	20 f4       	brcc	.+8      	; 0x110 <DIO_vsetPINDir+0x10>
 108:	81 34       	cpi	r24, 0x41	; 65
 10a:	09 f0       	breq	.+2      	; 0x10e <DIO_vsetPINDir+0xe>
 10c:	7b c0       	rjmp	.+246    	; 0x204 <DIO_vsetPINDir+0x104>
 10e:	07 c0       	rjmp	.+14     	; 0x11e <DIO_vsetPINDir+0x1e>
 110:	83 34       	cpi	r24, 0x43	; 67
 112:	09 f4       	brne	.+2      	; 0x116 <DIO_vsetPINDir+0x16>
 114:	3e c0       	rjmp	.+124    	; 0x192 <DIO_vsetPINDir+0x92>
 116:	84 34       	cpi	r24, 0x44	; 68
 118:	09 f0       	breq	.+2      	; 0x11c <DIO_vsetPINDir+0x1c>
 11a:	74 c0       	rjmp	.+232    	; 0x204 <DIO_vsetPINDir+0x104>
 11c:	57 c0       	rjmp	.+174    	; 0x1cc <DIO_vsetPINDir+0xcc>
	{
		
	
	case 'A':
	if(direction==1)
 11e:	41 30       	cpi	r20, 0x01	; 1
 120:	69 f4       	brne	.+26     	; 0x13c <DIO_vsetPINDir+0x3c>
	{
		DDRA|=(1<<pinnumber);
 122:	2a b3       	in	r18, 0x1a	; 26
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	ac 01       	movw	r20, r24
 12a:	02 c0       	rjmp	.+4      	; 0x130 <DIO_vsetPINDir+0x30>
 12c:	44 0f       	add	r20, r20
 12e:	55 1f       	adc	r21, r21
 130:	6a 95       	dec	r22
 132:	e2 f7       	brpl	.-8      	; 0x12c <DIO_vsetPINDir+0x2c>
 134:	ba 01       	movw	r22, r20
 136:	62 2b       	or	r22, r18
 138:	6a bb       	out	0x1a, r22	; 26
 13a:	08 95       	ret
	}
	else
	{
		DDRA&=(~(1<<pinnumber));
 13c:	2a b3       	in	r18, 0x1a	; 26
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	ac 01       	movw	r20, r24
 144:	02 c0       	rjmp	.+4      	; 0x14a <DIO_vsetPINDir+0x4a>
 146:	44 0f       	add	r20, r20
 148:	55 1f       	adc	r21, r21
 14a:	6a 95       	dec	r22
 14c:	e2 f7       	brpl	.-8      	; 0x146 <DIO_vsetPINDir+0x46>
 14e:	ba 01       	movw	r22, r20
 150:	60 95       	com	r22
 152:	62 23       	and	r22, r18
 154:	6a bb       	out	0x1a, r22	; 26
 156:	08 95       	ret
	}
	break;
	case 'B':
	if(direction==1)
 158:	41 30       	cpi	r20, 0x01	; 1
 15a:	69 f4       	brne	.+26     	; 0x176 <DIO_vsetPINDir+0x76>
	{
		DDRB|=(1<<pinnumber);
 15c:	27 b3       	in	r18, 0x17	; 23
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	ac 01       	movw	r20, r24
 164:	02 c0       	rjmp	.+4      	; 0x16a <DIO_vsetPINDir+0x6a>
 166:	44 0f       	add	r20, r20
 168:	55 1f       	adc	r21, r21
 16a:	6a 95       	dec	r22
 16c:	e2 f7       	brpl	.-8      	; 0x166 <DIO_vsetPINDir+0x66>
 16e:	ba 01       	movw	r22, r20
 170:	62 2b       	or	r22, r18
 172:	67 bb       	out	0x17, r22	; 23
 174:	08 95       	ret
	}
	else
	{
		DDRB&=(~(1<<pinnumber));
 176:	27 b3       	in	r18, 0x17	; 23
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	ac 01       	movw	r20, r24
 17e:	02 c0       	rjmp	.+4      	; 0x184 <DIO_vsetPINDir+0x84>
 180:	44 0f       	add	r20, r20
 182:	55 1f       	adc	r21, r21
 184:	6a 95       	dec	r22
 186:	e2 f7       	brpl	.-8      	; 0x180 <DIO_vsetPINDir+0x80>
 188:	ba 01       	movw	r22, r20
 18a:	60 95       	com	r22
 18c:	62 23       	and	r22, r18
 18e:	67 bb       	out	0x17, r22	; 23
 190:	08 95       	ret
	}
	break;
	case 'C':
	if(direction==1)
 192:	41 30       	cpi	r20, 0x01	; 1
 194:	69 f4       	brne	.+26     	; 0x1b0 <DIO_vsetPINDir+0xb0>
	{
		DDRC|=(1<<pinnumber);
 196:	24 b3       	in	r18, 0x14	; 20
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	ac 01       	movw	r20, r24
 19e:	02 c0       	rjmp	.+4      	; 0x1a4 <DIO_vsetPINDir+0xa4>
 1a0:	44 0f       	add	r20, r20
 1a2:	55 1f       	adc	r21, r21
 1a4:	6a 95       	dec	r22
 1a6:	e2 f7       	brpl	.-8      	; 0x1a0 <DIO_vsetPINDir+0xa0>
 1a8:	ba 01       	movw	r22, r20
 1aa:	62 2b       	or	r22, r18
 1ac:	64 bb       	out	0x14, r22	; 20
 1ae:	08 95       	ret
	}
	else
	{
		DDRC&=(~(1<<pinnumber));
 1b0:	24 b3       	in	r18, 0x14	; 20
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	ac 01       	movw	r20, r24
 1b8:	02 c0       	rjmp	.+4      	; 0x1be <DIO_vsetPINDir+0xbe>
 1ba:	44 0f       	add	r20, r20
 1bc:	55 1f       	adc	r21, r21
 1be:	6a 95       	dec	r22
 1c0:	e2 f7       	brpl	.-8      	; 0x1ba <DIO_vsetPINDir+0xba>
 1c2:	ba 01       	movw	r22, r20
 1c4:	60 95       	com	r22
 1c6:	62 23       	and	r22, r18
 1c8:	64 bb       	out	0x14, r22	; 20
 1ca:	08 95       	ret
	}
	break;
	case 'D':
	if(direction==1)
 1cc:	41 30       	cpi	r20, 0x01	; 1
 1ce:	69 f4       	brne	.+26     	; 0x1ea <DIO_vsetPINDir+0xea>
	{
		DDRD|=(1<<pinnumber);
 1d0:	21 b3       	in	r18, 0x11	; 17
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	ac 01       	movw	r20, r24
 1d8:	02 c0       	rjmp	.+4      	; 0x1de <DIO_vsetPINDir+0xde>
 1da:	44 0f       	add	r20, r20
 1dc:	55 1f       	adc	r21, r21
 1de:	6a 95       	dec	r22
 1e0:	e2 f7       	brpl	.-8      	; 0x1da <DIO_vsetPINDir+0xda>
 1e2:	ba 01       	movw	r22, r20
 1e4:	62 2b       	or	r22, r18
 1e6:	61 bb       	out	0x11, r22	; 17
 1e8:	08 95       	ret
	}
	else
	{
		DDRD&=(~(1<<pinnumber));
 1ea:	21 b3       	in	r18, 0x11	; 17
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	ac 01       	movw	r20, r24
 1f2:	02 c0       	rjmp	.+4      	; 0x1f8 <DIO_vsetPINDir+0xf8>
 1f4:	44 0f       	add	r20, r20
 1f6:	55 1f       	adc	r21, r21
 1f8:	6a 95       	dec	r22
 1fa:	e2 f7       	brpl	.-8      	; 0x1f4 <DIO_vsetPINDir+0xf4>
 1fc:	ba 01       	movw	r22, r20
 1fe:	60 95       	com	r22
 200:	62 23       	and	r22, r18
 202:	61 bb       	out	0x11, r22	; 17
 204:	08 95       	ret

00000206 <DIO_write>:
}


void DIO_write(char portname,char pinnumber,char outputvalue)
{
	switch(portname)
 206:	82 34       	cpi	r24, 0x42	; 66
 208:	51 f1       	breq	.+84     	; 0x25e <DIO_write+0x58>
 20a:	83 34       	cpi	r24, 0x43	; 67
 20c:	20 f4       	brcc	.+8      	; 0x216 <DIO_write+0x10>
 20e:	81 34       	cpi	r24, 0x41	; 65
 210:	09 f0       	breq	.+2      	; 0x214 <DIO_write+0xe>
 212:	7b c0       	rjmp	.+246    	; 0x30a <DIO_write+0x104>
 214:	07 c0       	rjmp	.+14     	; 0x224 <DIO_write+0x1e>
 216:	83 34       	cpi	r24, 0x43	; 67
 218:	09 f4       	brne	.+2      	; 0x21c <DIO_write+0x16>
 21a:	3e c0       	rjmp	.+124    	; 0x298 <DIO_write+0x92>
 21c:	84 34       	cpi	r24, 0x44	; 68
 21e:	09 f0       	breq	.+2      	; 0x222 <DIO_write+0x1c>
 220:	74 c0       	rjmp	.+232    	; 0x30a <DIO_write+0x104>
 222:	57 c0       	rjmp	.+174    	; 0x2d2 <DIO_write+0xcc>
	{
		case 'A' :
		
			if(outputvalue==1)
 224:	41 30       	cpi	r20, 0x01	; 1
 226:	69 f4       	brne	.+26     	; 0x242 <DIO_write+0x3c>
			{
				PORTA|=(1<<pinnumber);
 228:	2b b3       	in	r18, 0x1b	; 27
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	ac 01       	movw	r20, r24
 230:	02 c0       	rjmp	.+4      	; 0x236 <DIO_write+0x30>
 232:	44 0f       	add	r20, r20
 234:	55 1f       	adc	r21, r21
 236:	6a 95       	dec	r22
 238:	e2 f7       	brpl	.-8      	; 0x232 <DIO_write+0x2c>
 23a:	ba 01       	movw	r22, r20
 23c:	62 2b       	or	r22, r18
 23e:	6b bb       	out	0x1b, r22	; 27
 240:	08 95       	ret
			}
			else
			{
				PORTA&=(~(1<<pinnumber));
 242:	2b b3       	in	r18, 0x1b	; 27
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	ac 01       	movw	r20, r24
 24a:	02 c0       	rjmp	.+4      	; 0x250 <DIO_write+0x4a>
 24c:	44 0f       	add	r20, r20
 24e:	55 1f       	adc	r21, r21
 250:	6a 95       	dec	r22
 252:	e2 f7       	brpl	.-8      	; 0x24c <DIO_write+0x46>
 254:	ba 01       	movw	r22, r20
 256:	60 95       	com	r22
 258:	62 23       	and	r22, r18
 25a:	6b bb       	out	0x1b, r22	; 27
 25c:	08 95       	ret
			}
			break ;
			case 'B':
			
			if(outputvalue==1)
 25e:	41 30       	cpi	r20, 0x01	; 1
 260:	69 f4       	brne	.+26     	; 0x27c <DIO_write+0x76>
			{
				PORTB|=(1<<pinnumber);
 262:	28 b3       	in	r18, 0x18	; 24
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	ac 01       	movw	r20, r24
 26a:	02 c0       	rjmp	.+4      	; 0x270 <DIO_write+0x6a>
 26c:	44 0f       	add	r20, r20
 26e:	55 1f       	adc	r21, r21
 270:	6a 95       	dec	r22
 272:	e2 f7       	brpl	.-8      	; 0x26c <DIO_write+0x66>
 274:	ba 01       	movw	r22, r20
 276:	62 2b       	or	r22, r18
 278:	68 bb       	out	0x18, r22	; 24
 27a:	08 95       	ret
			}
			else
			{
				PORTB&=(~(1<<pinnumber));
 27c:	28 b3       	in	r18, 0x18	; 24
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	ac 01       	movw	r20, r24
 284:	02 c0       	rjmp	.+4      	; 0x28a <DIO_write+0x84>
 286:	44 0f       	add	r20, r20
 288:	55 1f       	adc	r21, r21
 28a:	6a 95       	dec	r22
 28c:	e2 f7       	brpl	.-8      	; 0x286 <DIO_write+0x80>
 28e:	ba 01       	movw	r22, r20
 290:	60 95       	com	r22
 292:	62 23       	and	r22, r18
 294:	68 bb       	out	0x18, r22	; 24
 296:	08 95       	ret
			}
			break ;
			case 'C' :
			
			if(outputvalue==1)
 298:	41 30       	cpi	r20, 0x01	; 1
 29a:	69 f4       	brne	.+26     	; 0x2b6 <DIO_write+0xb0>
			{
				PORTC|=(1<<pinnumber);
 29c:	25 b3       	in	r18, 0x15	; 21
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	ac 01       	movw	r20, r24
 2a4:	02 c0       	rjmp	.+4      	; 0x2aa <DIO_write+0xa4>
 2a6:	44 0f       	add	r20, r20
 2a8:	55 1f       	adc	r21, r21
 2aa:	6a 95       	dec	r22
 2ac:	e2 f7       	brpl	.-8      	; 0x2a6 <DIO_write+0xa0>
 2ae:	ba 01       	movw	r22, r20
 2b0:	62 2b       	or	r22, r18
 2b2:	65 bb       	out	0x15, r22	; 21
 2b4:	08 95       	ret
			}
			else
			{
				PORTC&=(~(1<<pinnumber));
 2b6:	25 b3       	in	r18, 0x15	; 21
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	ac 01       	movw	r20, r24
 2be:	02 c0       	rjmp	.+4      	; 0x2c4 <DIO_write+0xbe>
 2c0:	44 0f       	add	r20, r20
 2c2:	55 1f       	adc	r21, r21
 2c4:	6a 95       	dec	r22
 2c6:	e2 f7       	brpl	.-8      	; 0x2c0 <DIO_write+0xba>
 2c8:	ba 01       	movw	r22, r20
 2ca:	60 95       	com	r22
 2cc:	62 23       	and	r22, r18
 2ce:	65 bb       	out	0x15, r22	; 21
 2d0:	08 95       	ret
			}
			break ;
		case 'D':
		
		if(outputvalue==1)
 2d2:	41 30       	cpi	r20, 0x01	; 1
 2d4:	69 f4       	brne	.+26     	; 0x2f0 <DIO_write+0xea>
		{
			PORTD|=(1<<pinnumber);
 2d6:	22 b3       	in	r18, 0x12	; 18
 2d8:	81 e0       	ldi	r24, 0x01	; 1
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	ac 01       	movw	r20, r24
 2de:	02 c0       	rjmp	.+4      	; 0x2e4 <DIO_write+0xde>
 2e0:	44 0f       	add	r20, r20
 2e2:	55 1f       	adc	r21, r21
 2e4:	6a 95       	dec	r22
 2e6:	e2 f7       	brpl	.-8      	; 0x2e0 <DIO_write+0xda>
 2e8:	ba 01       	movw	r22, r20
 2ea:	62 2b       	or	r22, r18
 2ec:	62 bb       	out	0x12, r22	; 18
 2ee:	08 95       	ret
		}
		else
	{
			PORTD&=(~(1<<pinnumber));
 2f0:	22 b3       	in	r18, 0x12	; 18
 2f2:	81 e0       	ldi	r24, 0x01	; 1
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	ac 01       	movw	r20, r24
 2f8:	02 c0       	rjmp	.+4      	; 0x2fe <DIO_write+0xf8>
 2fa:	44 0f       	add	r20, r20
 2fc:	55 1f       	adc	r21, r21
 2fe:	6a 95       	dec	r22
 300:	e2 f7       	brpl	.-8      	; 0x2fa <DIO_write+0xf4>
 302:	ba 01       	movw	r22, r20
 304:	60 95       	com	r22
 306:	62 23       	and	r22, r18
 308:	62 bb       	out	0x12, r22	; 18
 30a:	08 95       	ret

0000030c <DIO_u8read>:


char DIO_u8read(char portname,char pinnumber)
{
	char x ;
	switch(portname)
 30c:	82 34       	cpi	r24, 0x42	; 66
 30e:	f9 f0       	breq	.+62     	; 0x34e <DIO_u8read+0x42>
 310:	83 34       	cpi	r24, 0x43	; 67
 312:	20 f4       	brcc	.+8      	; 0x31c <DIO_u8read+0x10>
 314:	81 34       	cpi	r24, 0x41	; 65
 316:	09 f0       	breq	.+2      	; 0x31a <DIO_u8read+0xe>
 318:	52 c0       	rjmp	.+164    	; 0x3be <DIO_u8read+0xb2>
 31a:	06 c0       	rjmp	.+12     	; 0x328 <DIO_u8read+0x1c>
 31c:	83 34       	cpi	r24, 0x43	; 67
 31e:	51 f1       	breq	.+84     	; 0x374 <DIO_u8read+0x68>
 320:	84 34       	cpi	r24, 0x44	; 68
 322:	09 f0       	breq	.+2      	; 0x326 <DIO_u8read+0x1a>
 324:	4c c0       	rjmp	.+152    	; 0x3be <DIO_u8read+0xb2>
 326:	39 c0       	rjmp	.+114    	; 0x39a <DIO_u8read+0x8e>
	{
		case 'A' :
		x=((PINA&(1<<pinnumber))>>pinnumber);
 328:	29 b3       	in	r18, 0x19	; 25
 32a:	81 e0       	ldi	r24, 0x01	; 1
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	06 2e       	mov	r0, r22
 330:	02 c0       	rjmp	.+4      	; 0x336 <DIO_u8read+0x2a>
 332:	88 0f       	add	r24, r24
 334:	99 1f       	adc	r25, r25
 336:	0a 94       	dec	r0
 338:	e2 f7       	brpl	.-8      	; 0x332 <DIO_u8read+0x26>
 33a:	30 e0       	ldi	r19, 0x00	; 0
 33c:	82 23       	and	r24, r18
 33e:	93 23       	and	r25, r19
 340:	02 c0       	rjmp	.+4      	; 0x346 <DIO_u8read+0x3a>
 342:	95 95       	asr	r25
 344:	87 95       	ror	r24
 346:	6a 95       	dec	r22
 348:	e2 f7       	brpl	.-8      	; 0x342 <DIO_u8read+0x36>
 34a:	98 2f       	mov	r25, r24
		break;
 34c:	38 c0       	rjmp	.+112    	; 0x3be <DIO_u8read+0xb2>
		
	case 'B' :
	x=((PINB&(1<<pinnumber))>>pinnumber) ;
 34e:	26 b3       	in	r18, 0x16	; 22
 350:	81 e0       	ldi	r24, 0x01	; 1
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	06 2e       	mov	r0, r22
 356:	02 c0       	rjmp	.+4      	; 0x35c <DIO_u8read+0x50>
 358:	88 0f       	add	r24, r24
 35a:	99 1f       	adc	r25, r25
 35c:	0a 94       	dec	r0
 35e:	e2 f7       	brpl	.-8      	; 0x358 <DIO_u8read+0x4c>
 360:	30 e0       	ldi	r19, 0x00	; 0
 362:	82 23       	and	r24, r18
 364:	93 23       	and	r25, r19
 366:	02 c0       	rjmp	.+4      	; 0x36c <DIO_u8read+0x60>
 368:	95 95       	asr	r25
 36a:	87 95       	ror	r24
 36c:	6a 95       	dec	r22
 36e:	e2 f7       	brpl	.-8      	; 0x368 <DIO_u8read+0x5c>
 370:	98 2f       	mov	r25, r24
	break;
 372:	25 c0       	rjmp	.+74     	; 0x3be <DIO_u8read+0xb2>
	
	case 'C' :
	x=((PINC&(1<<pinnumber))>>pinnumber) ;
 374:	23 b3       	in	r18, 0x13	; 19
 376:	81 e0       	ldi	r24, 0x01	; 1
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	06 2e       	mov	r0, r22
 37c:	02 c0       	rjmp	.+4      	; 0x382 <DIO_u8read+0x76>
 37e:	88 0f       	add	r24, r24
 380:	99 1f       	adc	r25, r25
 382:	0a 94       	dec	r0
 384:	e2 f7       	brpl	.-8      	; 0x37e <DIO_u8read+0x72>
 386:	30 e0       	ldi	r19, 0x00	; 0
 388:	82 23       	and	r24, r18
 38a:	93 23       	and	r25, r19
 38c:	02 c0       	rjmp	.+4      	; 0x392 <DIO_u8read+0x86>
 38e:	95 95       	asr	r25
 390:	87 95       	ror	r24
 392:	6a 95       	dec	r22
 394:	e2 f7       	brpl	.-8      	; 0x38e <DIO_u8read+0x82>
 396:	98 2f       	mov	r25, r24
	break;
 398:	12 c0       	rjmp	.+36     	; 0x3be <DIO_u8read+0xb2>
	
	case 'D' :
	x=((PIND&(1<<pinnumber))>>pinnumber) ;
 39a:	20 b3       	in	r18, 0x10	; 16
 39c:	81 e0       	ldi	r24, 0x01	; 1
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	06 2e       	mov	r0, r22
 3a2:	02 c0       	rjmp	.+4      	; 0x3a8 <DIO_u8read+0x9c>
 3a4:	88 0f       	add	r24, r24
 3a6:	99 1f       	adc	r25, r25
 3a8:	0a 94       	dec	r0
 3aa:	e2 f7       	brpl	.-8      	; 0x3a4 <DIO_u8read+0x98>
 3ac:	30 e0       	ldi	r19, 0x00	; 0
 3ae:	82 23       	and	r24, r18
 3b0:	93 23       	and	r25, r19
 3b2:	02 c0       	rjmp	.+4      	; 0x3b8 <DIO_u8read+0xac>
 3b4:	95 95       	asr	r25
 3b6:	87 95       	ror	r24
 3b8:	6a 95       	dec	r22
 3ba:	e2 f7       	brpl	.-8      	; 0x3b4 <DIO_u8read+0xa8>
 3bc:	98 2f       	mov	r25, r24
	break;
	default: break;
}
return x ;
}
 3be:	89 2f       	mov	r24, r25
 3c0:	08 95       	ret

000003c2 <DIO_toggle>:
void DIO_toggle(char portname,char pinnumber)
{
	switch(portname)
 3c2:	82 34       	cpi	r24, 0x42	; 66
 3c4:	b9 f0       	breq	.+46     	; 0x3f4 <DIO_toggle+0x32>
 3c6:	83 34       	cpi	r24, 0x43	; 67
 3c8:	18 f4       	brcc	.+6      	; 0x3d0 <DIO_toggle+0xe>
 3ca:	81 34       	cpi	r24, 0x41	; 65
 3cc:	c9 f5       	brne	.+114    	; 0x440 <DIO_toggle+0x7e>
 3ce:	05 c0       	rjmp	.+10     	; 0x3da <DIO_toggle+0x18>
 3d0:	83 34       	cpi	r24, 0x43	; 67
 3d2:	e9 f0       	breq	.+58     	; 0x40e <DIO_toggle+0x4c>
 3d4:	84 34       	cpi	r24, 0x44	; 68
 3d6:	a1 f5       	brne	.+104    	; 0x440 <DIO_toggle+0x7e>
 3d8:	27 c0       	rjmp	.+78     	; 0x428 <DIO_toggle+0x66>
	{
		case 'A':
		PORTA^=(1<<pinnumber);
 3da:	2b b3       	in	r18, 0x1b	; 27
 3dc:	81 e0       	ldi	r24, 0x01	; 1
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	ac 01       	movw	r20, r24
 3e2:	02 c0       	rjmp	.+4      	; 0x3e8 <DIO_toggle+0x26>
 3e4:	44 0f       	add	r20, r20
 3e6:	55 1f       	adc	r21, r21
 3e8:	6a 95       	dec	r22
 3ea:	e2 f7       	brpl	.-8      	; 0x3e4 <DIO_toggle+0x22>
 3ec:	ba 01       	movw	r22, r20
 3ee:	62 27       	eor	r22, r18
 3f0:	6b bb       	out	0x1b, r22	; 27
		break;
 3f2:	08 95       	ret
		case 'B':
		PORTB^=(1<<pinnumber);
 3f4:	28 b3       	in	r18, 0x18	; 24
 3f6:	81 e0       	ldi	r24, 0x01	; 1
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	ac 01       	movw	r20, r24
 3fc:	02 c0       	rjmp	.+4      	; 0x402 <DIO_toggle+0x40>
 3fe:	44 0f       	add	r20, r20
 400:	55 1f       	adc	r21, r21
 402:	6a 95       	dec	r22
 404:	e2 f7       	brpl	.-8      	; 0x3fe <DIO_toggle+0x3c>
 406:	ba 01       	movw	r22, r20
 408:	62 27       	eor	r22, r18
 40a:	68 bb       	out	0x18, r22	; 24
		break;
 40c:	08 95       	ret
		case 'C':
		PORTC^=(1<<pinnumber);
 40e:	25 b3       	in	r18, 0x15	; 21
 410:	81 e0       	ldi	r24, 0x01	; 1
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	ac 01       	movw	r20, r24
 416:	02 c0       	rjmp	.+4      	; 0x41c <DIO_toggle+0x5a>
 418:	44 0f       	add	r20, r20
 41a:	55 1f       	adc	r21, r21
 41c:	6a 95       	dec	r22
 41e:	e2 f7       	brpl	.-8      	; 0x418 <DIO_toggle+0x56>
 420:	ba 01       	movw	r22, r20
 422:	62 27       	eor	r22, r18
 424:	65 bb       	out	0x15, r22	; 21
		break;
 426:	08 95       	ret
		case 'D':
		PORTD^=(1<<pinnumber);
 428:	22 b3       	in	r18, 0x12	; 18
 42a:	81 e0       	ldi	r24, 0x01	; 1
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	ac 01       	movw	r20, r24
 430:	02 c0       	rjmp	.+4      	; 0x436 <DIO_toggle+0x74>
 432:	44 0f       	add	r20, r20
 434:	55 1f       	adc	r21, r21
 436:	6a 95       	dec	r22
 438:	e2 f7       	brpl	.-8      	; 0x432 <DIO_toggle+0x70>
 43a:	ba 01       	movw	r22, r20
 43c:	62 27       	eor	r22, r18
 43e:	62 bb       	out	0x12, r22	; 18
 440:	08 95       	ret

00000442 <DIO_write_port>:
		default: break;
	}
}
void DIO_write_port(char portname,char portvalue)
{
	switch(portname)
 442:	82 34       	cpi	r24, 0x42	; 66
 444:	61 f0       	breq	.+24     	; 0x45e <DIO_write_port+0x1c>
 446:	83 34       	cpi	r24, 0x43	; 67
 448:	18 f4       	brcc	.+6      	; 0x450 <DIO_write_port+0xe>
 44a:	81 34       	cpi	r24, 0x41	; 65
 44c:	69 f4       	brne	.+26     	; 0x468 <DIO_write_port+0x26>
 44e:	05 c0       	rjmp	.+10     	; 0x45a <DIO_write_port+0x18>
 450:	83 34       	cpi	r24, 0x43	; 67
 452:	39 f0       	breq	.+14     	; 0x462 <DIO_write_port+0x20>
 454:	84 34       	cpi	r24, 0x44	; 68
 456:	41 f4       	brne	.+16     	; 0x468 <DIO_write_port+0x26>
 458:	06 c0       	rjmp	.+12     	; 0x466 <DIO_write_port+0x24>
	{
		case 'A' :
		PORTA=portvalue;
 45a:	6b bb       	out	0x1b, r22	; 27
		break ;
 45c:	08 95       	ret
		case 'B':
		PORTB=portvalue;
 45e:	68 bb       	out	0x18, r22	; 24
		break ;
 460:	08 95       	ret
		case 'C' :
		PORTC=portvalue;
 462:	65 bb       	out	0x15, r22	; 21
		break ;
 464:	08 95       	ret
		case 'D':
		PORTD=portvalue;
 466:	62 bb       	out	0x12, r22	; 18
 468:	08 95       	ret

0000046a <dio_write_highnibble>:
		default: break ;
	}
}
void dio_write_highnibble(char portname,char value)
{
		switch(portname)
 46a:	82 34       	cpi	r24, 0x42	; 66
 46c:	79 f0       	breq	.+30     	; 0x48c <dio_write_highnibble+0x22>
 46e:	83 34       	cpi	r24, 0x43	; 67
 470:	18 f4       	brcc	.+6      	; 0x478 <dio_write_highnibble+0xe>
 472:	81 34       	cpi	r24, 0x41	; 65
 474:	c9 f4       	brne	.+50     	; 0x4a8 <dio_write_highnibble+0x3e>
 476:	05 c0       	rjmp	.+10     	; 0x482 <dio_write_highnibble+0x18>
 478:	83 34       	cpi	r24, 0x43	; 67
 47a:	69 f0       	breq	.+26     	; 0x496 <dio_write_highnibble+0x2c>
 47c:	84 34       	cpi	r24, 0x44	; 68
 47e:	a1 f4       	brne	.+40     	; 0x4a8 <dio_write_highnibble+0x3e>
 480:	0f c0       	rjmp	.+30     	; 0x4a0 <dio_write_highnibble+0x36>
		{
			case 'A' :
			PORTA|=(value&0xf0);
 482:	8b b3       	in	r24, 0x1b	; 27
 484:	60 7f       	andi	r22, 0xF0	; 240
 486:	68 2b       	or	r22, r24
 488:	6b bb       	out	0x1b, r22	; 27
			break ;
 48a:	08 95       	ret
			case 'B':
			PORTB|=(value&0xf0);
 48c:	88 b3       	in	r24, 0x18	; 24
 48e:	60 7f       	andi	r22, 0xF0	; 240
 490:	68 2b       	or	r22, r24
 492:	68 bb       	out	0x18, r22	; 24
			break ;
 494:	08 95       	ret
			case 'C' :
			PORTC|=(value&0xf0);
 496:	85 b3       	in	r24, 0x15	; 21
 498:	60 7f       	andi	r22, 0xF0	; 240
 49a:	68 2b       	or	r22, r24
 49c:	65 bb       	out	0x15, r22	; 21
			break ;
 49e:	08 95       	ret
			case 'D':
			PORTD|=(value&0xf0);
 4a0:	82 b3       	in	r24, 0x12	; 18
 4a2:	60 7f       	andi	r22, 0xF0	; 240
 4a4:	68 2b       	or	r22, r24
 4a6:	62 bb       	out	0x12, r22	; 18
 4a8:	08 95       	ret

000004aa <clear_high_nibble>:
}
}

void clear_high_nibble(char portname,char value)
{
	switch(portname)
 4aa:	82 34       	cpi	r24, 0x42	; 66
 4ac:	71 f0       	breq	.+28     	; 0x4ca <clear_high_nibble+0x20>
 4ae:	83 34       	cpi	r24, 0x43	; 67
 4b0:	18 f4       	brcc	.+6      	; 0x4b8 <clear_high_nibble+0xe>
 4b2:	81 34       	cpi	r24, 0x41	; 65
 4b4:	a9 f4       	brne	.+42     	; 0x4e0 <clear_high_nibble+0x36>
 4b6:	05 c0       	rjmp	.+10     	; 0x4c2 <clear_high_nibble+0x18>
 4b8:	83 34       	cpi	r24, 0x43	; 67
 4ba:	59 f0       	breq	.+22     	; 0x4d2 <clear_high_nibble+0x28>
 4bc:	84 34       	cpi	r24, 0x44	; 68
 4be:	81 f4       	brne	.+32     	; 0x4e0 <clear_high_nibble+0x36>
 4c0:	0c c0       	rjmp	.+24     	; 0x4da <clear_high_nibble+0x30>
	{
		case 'A' :
		PORTA&=0x0f;
 4c2:	8b b3       	in	r24, 0x1b	; 27
 4c4:	8f 70       	andi	r24, 0x0F	; 15
 4c6:	8b bb       	out	0x1b, r24	; 27
		break ;
 4c8:	08 95       	ret
		case 'B':
		PORTB&=0x0f;
 4ca:	88 b3       	in	r24, 0x18	; 24
 4cc:	8f 70       	andi	r24, 0x0F	; 15
 4ce:	88 bb       	out	0x18, r24	; 24
		break ;
 4d0:	08 95       	ret
		case 'C' :
		PORTC&=0x0f;
 4d2:	85 b3       	in	r24, 0x15	; 21
 4d4:	8f 70       	andi	r24, 0x0F	; 15
 4d6:	85 bb       	out	0x15, r24	; 21
		break ;
 4d8:	08 95       	ret
		case 'D':
		PORTD&=0x0f;
 4da:	82 b3       	in	r24, 0x12	; 18
 4dc:	8f 70       	andi	r24, 0x0F	; 15
 4de:	82 bb       	out	0x12, r24	; 18
 4e0:	08 95       	ret

000004e2 <DIO_vconnectpullup>:
	}
}

DIO_vconnectpullup(char portname ,char pinnumber, char connect_pullup)
{
	switch(portname)
 4e2:	82 34       	cpi	r24, 0x42	; 66
 4e4:	91 f1       	breq	.+100    	; 0x54a <DIO_vconnectpullup+0x68>
 4e6:	83 34       	cpi	r24, 0x43	; 67
 4e8:	20 f4       	brcc	.+8      	; 0x4f2 <DIO_vconnectpullup+0x10>
 4ea:	81 34       	cpi	r24, 0x41	; 65
 4ec:	09 f0       	breq	.+2      	; 0x4f0 <DIO_vconnectpullup+0xe>
 4ee:	9b c0       	rjmp	.+310    	; 0x626 <DIO_vconnectpullup+0x144>
 4f0:	07 c0       	rjmp	.+14     	; 0x500 <DIO_vconnectpullup+0x1e>
 4f2:	83 34       	cpi	r24, 0x43	; 67
 4f4:	09 f4       	brne	.+2      	; 0x4f8 <DIO_vconnectpullup+0x16>
 4f6:	4e c0       	rjmp	.+156    	; 0x594 <DIO_vconnectpullup+0xb2>
 4f8:	84 34       	cpi	r24, 0x44	; 68
 4fa:	09 f0       	breq	.+2      	; 0x4fe <DIO_vconnectpullup+0x1c>
 4fc:	94 c0       	rjmp	.+296    	; 0x626 <DIO_vconnectpullup+0x144>
 4fe:	6f c0       	rjmp	.+222    	; 0x5de <DIO_vconnectpullup+0xfc>
	{
		case 'A':
		if(connect_pullup==1)
 500:	41 30       	cpi	r20, 0x01	; 1
 502:	a9 f4       	brne	.+42     	; 0x52e <DIO_vconnectpullup+0x4c>
		{
			CLR_BIT(SFIOR,PUD);
 504:	80 b7       	in	r24, 0x30	; 48
 506:	8b 7f       	andi	r24, 0xFB	; 251
 508:	80 bf       	out	0x30, r24	; 48
		    CLR_BIT(DDRA,pinnumber);
 50a:	2a b3       	in	r18, 0x1a	; 26
 50c:	81 e0       	ldi	r24, 0x01	; 1
 50e:	90 e0       	ldi	r25, 0x00	; 0
 510:	ac 01       	movw	r20, r24
 512:	02 c0       	rjmp	.+4      	; 0x518 <DIO_vconnectpullup+0x36>
 514:	44 0f       	add	r20, r20
 516:	55 1f       	adc	r21, r21
 518:	6a 95       	dec	r22
 51a:	e2 f7       	brpl	.-8      	; 0x514 <DIO_vconnectpullup+0x32>
 51c:	ba 01       	movw	r22, r20
 51e:	84 2f       	mov	r24, r20
 520:	80 95       	com	r24
 522:	82 23       	and	r24, r18
 524:	8a bb       	out	0x1a, r24	; 26
			SET_BIT(PORTA,pinnumber);
 526:	8b b3       	in	r24, 0x1b	; 27
 528:	68 2b       	or	r22, r24
 52a:	6b bb       	out	0x1b, r22	; 27
 52c:	08 95       	ret
			
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);
 52e:	2b b3       	in	r18, 0x1b	; 27
 530:	81 e0       	ldi	r24, 0x01	; 1
 532:	90 e0       	ldi	r25, 0x00	; 0
 534:	ac 01       	movw	r20, r24
 536:	02 c0       	rjmp	.+4      	; 0x53c <DIO_vconnectpullup+0x5a>
 538:	44 0f       	add	r20, r20
 53a:	55 1f       	adc	r21, r21
 53c:	6a 95       	dec	r22
 53e:	e2 f7       	brpl	.-8      	; 0x538 <DIO_vconnectpullup+0x56>
 540:	ba 01       	movw	r22, r20
 542:	60 95       	com	r22
 544:	62 23       	and	r22, r18
 546:	6b bb       	out	0x1b, r22	; 27
 548:	08 95       	ret
		}
		break;
 		case 'B':
		if(connect_pullup==1)
 54a:	41 30       	cpi	r20, 0x01	; 1
 54c:	a9 f4       	brne	.+42     	; 0x578 <DIO_vconnectpullup+0x96>
		{
			CLR_BIT(SFIOR,PUD);
 54e:	80 b7       	in	r24, 0x30	; 48
 550:	8b 7f       	andi	r24, 0xFB	; 251
 552:	80 bf       	out	0x30, r24	; 48
			CLR_BIT(DDRB,pinnumber);
 554:	27 b3       	in	r18, 0x17	; 23
 556:	81 e0       	ldi	r24, 0x01	; 1
 558:	90 e0       	ldi	r25, 0x00	; 0
 55a:	ac 01       	movw	r20, r24
 55c:	02 c0       	rjmp	.+4      	; 0x562 <DIO_vconnectpullup+0x80>
 55e:	44 0f       	add	r20, r20
 560:	55 1f       	adc	r21, r21
 562:	6a 95       	dec	r22
 564:	e2 f7       	brpl	.-8      	; 0x55e <DIO_vconnectpullup+0x7c>
 566:	ba 01       	movw	r22, r20
 568:	84 2f       	mov	r24, r20
 56a:	80 95       	com	r24
 56c:	82 23       	and	r24, r18
 56e:	87 bb       	out	0x17, r24	; 23
			SET_BIT(PORTB,pinnumber);
 570:	88 b3       	in	r24, 0x18	; 24
 572:	68 2b       	or	r22, r24
 574:	68 bb       	out	0x18, r22	; 24
 576:	08 95       	ret
			
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);
 578:	28 b3       	in	r18, 0x18	; 24
 57a:	81 e0       	ldi	r24, 0x01	; 1
 57c:	90 e0       	ldi	r25, 0x00	; 0
 57e:	ac 01       	movw	r20, r24
 580:	02 c0       	rjmp	.+4      	; 0x586 <DIO_vconnectpullup+0xa4>
 582:	44 0f       	add	r20, r20
 584:	55 1f       	adc	r21, r21
 586:	6a 95       	dec	r22
 588:	e2 f7       	brpl	.-8      	; 0x582 <DIO_vconnectpullup+0xa0>
 58a:	ba 01       	movw	r22, r20
 58c:	60 95       	com	r22
 58e:	62 23       	and	r22, r18
 590:	68 bb       	out	0x18, r22	; 24
 592:	08 95       	ret
		}
		break;
	case 'C':
	if(connect_pullup==1)
 594:	41 30       	cpi	r20, 0x01	; 1
 596:	a9 f4       	brne	.+42     	; 0x5c2 <DIO_vconnectpullup+0xe0>
	{
		CLR_BIT(SFIOR,PUD);
 598:	80 b7       	in	r24, 0x30	; 48
 59a:	8b 7f       	andi	r24, 0xFB	; 251
 59c:	80 bf       	out	0x30, r24	; 48
		CLR_BIT(DDRC,pinnumber);
 59e:	24 b3       	in	r18, 0x14	; 20
 5a0:	81 e0       	ldi	r24, 0x01	; 1
 5a2:	90 e0       	ldi	r25, 0x00	; 0
 5a4:	ac 01       	movw	r20, r24
 5a6:	02 c0       	rjmp	.+4      	; 0x5ac <DIO_vconnectpullup+0xca>
 5a8:	44 0f       	add	r20, r20
 5aa:	55 1f       	adc	r21, r21
 5ac:	6a 95       	dec	r22
 5ae:	e2 f7       	brpl	.-8      	; 0x5a8 <DIO_vconnectpullup+0xc6>
 5b0:	ba 01       	movw	r22, r20
 5b2:	84 2f       	mov	r24, r20
 5b4:	80 95       	com	r24
 5b6:	82 23       	and	r24, r18
 5b8:	84 bb       	out	0x14, r24	; 20
		SET_BIT(PORTC,pinnumber);
 5ba:	85 b3       	in	r24, 0x15	; 21
 5bc:	68 2b       	or	r22, r24
 5be:	65 bb       	out	0x15, r22	; 21
 5c0:	08 95       	ret
		
	}
	else
	{
		CLR_BIT(PORTC,pinnumber);
 5c2:	25 b3       	in	r18, 0x15	; 21
 5c4:	81 e0       	ldi	r24, 0x01	; 1
 5c6:	90 e0       	ldi	r25, 0x00	; 0
 5c8:	ac 01       	movw	r20, r24
 5ca:	02 c0       	rjmp	.+4      	; 0x5d0 <DIO_vconnectpullup+0xee>
 5cc:	44 0f       	add	r20, r20
 5ce:	55 1f       	adc	r21, r21
 5d0:	6a 95       	dec	r22
 5d2:	e2 f7       	brpl	.-8      	; 0x5cc <DIO_vconnectpullup+0xea>
 5d4:	ba 01       	movw	r22, r20
 5d6:	60 95       	com	r22
 5d8:	62 23       	and	r22, r18
 5da:	65 bb       	out	0x15, r22	; 21
 5dc:	08 95       	ret
	}
	break;
	case 'D':
	if(connect_pullup==1)
 5de:	41 30       	cpi	r20, 0x01	; 1
 5e0:	a9 f4       	brne	.+42     	; 0x60c <DIO_vconnectpullup+0x12a>
	{
		CLR_BIT(SFIOR,PUD);
 5e2:	80 b7       	in	r24, 0x30	; 48
 5e4:	8b 7f       	andi	r24, 0xFB	; 251
 5e6:	80 bf       	out	0x30, r24	; 48
		CLR_BIT(DDRD,pinnumber);
 5e8:	21 b3       	in	r18, 0x11	; 17
 5ea:	81 e0       	ldi	r24, 0x01	; 1
 5ec:	90 e0       	ldi	r25, 0x00	; 0
 5ee:	ac 01       	movw	r20, r24
 5f0:	02 c0       	rjmp	.+4      	; 0x5f6 <DIO_vconnectpullup+0x114>
 5f2:	44 0f       	add	r20, r20
 5f4:	55 1f       	adc	r21, r21
 5f6:	6a 95       	dec	r22
 5f8:	e2 f7       	brpl	.-8      	; 0x5f2 <DIO_vconnectpullup+0x110>
 5fa:	ba 01       	movw	r22, r20
 5fc:	84 2f       	mov	r24, r20
 5fe:	80 95       	com	r24
 600:	82 23       	and	r24, r18
 602:	81 bb       	out	0x11, r24	; 17
		SET_BIT(PORTD,pinnumber);
 604:	82 b3       	in	r24, 0x12	; 18
 606:	68 2b       	or	r22, r24
 608:	62 bb       	out	0x12, r22	; 18
 60a:	08 95       	ret
		
	}
	else
	{
		CLR_BIT(PORTD,pinnumber);
 60c:	22 b3       	in	r18, 0x12	; 18
 60e:	81 e0       	ldi	r24, 0x01	; 1
 610:	90 e0       	ldi	r25, 0x00	; 0
 612:	ac 01       	movw	r20, r24
 614:	02 c0       	rjmp	.+4      	; 0x61a <DIO_vconnectpullup+0x138>
 616:	44 0f       	add	r20, r20
 618:	55 1f       	adc	r21, r21
 61a:	6a 95       	dec	r22
 61c:	e2 f7       	brpl	.-8      	; 0x616 <DIO_vconnectpullup+0x134>
 61e:	ba 01       	movw	r22, r20
 620:	60 95       	com	r22
 622:	62 23       	and	r22, r18
 624:	62 bb       	out	0x12, r22	; 18
	}
	break;
	
}
 626:	08 95       	ret

00000628 <LED_vInit>:
 *  Author: Mohamed Zaghlol
 */ 
#include "DIO.h"
LED_vInit(char portname,char pinnumber)
{
DIO_vsetPINDir(portname,pinnumber,1);
 628:	41 e0       	ldi	r20, 0x01	; 1
 62a:	0e 94 80 00 	call	0x100	; 0x100 <DIO_vsetPINDir>
}
 62e:	08 95       	ret

00000630 <LED_vturnon>:
LED_vturnon(char portname,char pinnumber)
{
DIO_write(portname,pinnumber,1);
 630:	41 e0       	ldi	r20, 0x01	; 1
 632:	0e 94 03 01 	call	0x206	; 0x206 <DIO_write>
}
 636:	08 95       	ret

00000638 <LED_vturnoff>:
LED_vturnoff(char portname,char pinnumber)
{
DIO_write(portname,pinnumber,0);
 638:	40 e0       	ldi	r20, 0x00	; 0
 63a:	0e 94 03 01 	call	0x206	; 0x206 <DIO_write>
}
 63e:	08 95       	ret

00000640 <LED_vtoggle>:
LED_vtoggle(char portname,char pinnumber)
{
DIO_toggle(portname,pinnumber);
 640:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <DIO_toggle>
}
 644:	08 95       	ret

00000646 <_exit>:
 646:	f8 94       	cli

00000648 <__stop_program>:
 648:	ff cf       	rjmp	.-2      	; 0x648 <__stop_program>
