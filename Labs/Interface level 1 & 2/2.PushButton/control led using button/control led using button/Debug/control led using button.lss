
control led using button.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004ee  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000004ee  00000562  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000564  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000c30  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000e0  00000000  00000000  00000cb8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007d7  00000000  00000000  00000d98  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000295  00000000  00000000  0000156f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004f1  00000000  00000000  00001804  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000140  00000000  00000000  00001cf8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002be  00000000  00000000  00001e38  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000053a  00000000  00000000  000020f6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ee       	ldi	r30, 0xEE	; 238
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 50 00 	call	0xa0	; 0xa0 <main>
  8a:	0c 94 75 02 	jmp	0x4ea	; 0x4ea <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <button_vInit>:

#include "DIO.h"
void button_vInit(unsigned char portname,unsigned char pinnumber)
{
	DIO_vsetPINDir(portname,pinnumber,0);
  92:	40 e0       	ldi	r20, 0x00	; 0
  94:	0e 94 87 00 	call	0x10e	; 0x10e <DIO_vsetPINDir>
}
  98:	08 95       	ret

0000009a <button_u8read>:
unsigned char button_u8read(unsigned char portname,unsigned char pinnumber)
{
	unsigned char x;
	x=DIO_u8read(portname,pinnumber);
  9a:	0e 94 8d 01 	call	0x31a	; 0x31a <DIO_u8read>
	return x ;
}
  9e:	08 95       	ret

000000a0 <main>:
#include "button.h"
#define F_CPU 8000000UL
#include <util/delay.h>
int main(void)
{
	button_vInit('D',0);
  a0:	84 e4       	ldi	r24, 0x44	; 68
  a2:	60 e0       	ldi	r22, 0x00	; 0
  a4:	0e 94 49 00 	call	0x92	; 0x92 <button_vInit>
	
	LED_vInit('D',1);
  a8:	84 e4       	ldi	r24, 0x44	; 68
  aa:	61 e0       	ldi	r22, 0x01	; 1
  ac:	0e 94 63 02 	call	0x4c6	; 0x4c6 <LED_vInit>
	LED_vInit('D',2);
  b0:	84 e4       	ldi	r24, 0x44	; 68
  b2:	62 e0       	ldi	r22, 0x02	; 2
  b4:	0e 94 63 02 	call	0x4c6	; 0x4c6 <LED_vInit>
	LED_vInit('D',3);
  b8:	84 e4       	ldi	r24, 0x44	; 68
  ba:	63 e0       	ldi	r22, 0x03	; 3
  bc:	0e 94 63 02 	call	0x4c6	; 0x4c6 <LED_vInit>
	LED_vInit('D',4);
  c0:	84 e4       	ldi	r24, 0x44	; 68
  c2:	64 e0       	ldi	r22, 0x04	; 4
  c4:	0e 94 63 02 	call	0x4c6	; 0x4c6 <LED_vInit>
	LED_vInit('D',5);
  c8:	84 e4       	ldi	r24, 0x44	; 68
  ca:	65 e0       	ldi	r22, 0x05	; 5
  cc:	0e 94 63 02 	call	0x4c6	; 0x4c6 <LED_vInit>
	LED_vInit('D',6);
  d0:	84 e4       	ldi	r24, 0x44	; 68
  d2:	66 e0       	ldi	r22, 0x06	; 6
  d4:	0e 94 63 02 	call	0x4c6	; 0x4c6 <LED_vInit>
	LED_vInit('D',7);
  d8:	84 e4       	ldi	r24, 0x44	; 68
  da:	67 e0       	ldi	r22, 0x07	; 7
  dc:	0e 94 63 02 	call	0x4c6	; 0x4c6 <LED_vInit>
	
	
	unsigned char z;
    while(1)
    {
       z=button_u8read('D',0);
  e0:	d1 e0       	ldi	r29, 0x01	; 1
  e2:	84 e4       	ldi	r24, 0x44	; 68
  e4:	60 e0       	ldi	r22, 0x00	; 0
  e6:	0e 94 4d 00 	call	0x9a	; 0x9a <button_u8read>
  ea:	cd 2f       	mov	r28, r29
	  // if (z==1)
	   {   for (int i=1;i<=7;i++){		   LED_vTurnOn('D',i);
  ec:	84 e4       	ldi	r24, 0x44	; 68
  ee:	6c 2f       	mov	r22, r28
  f0:	0e 94 67 02 	call	0x4ce	; 0x4ce <LED_vTurnOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f4:	8f ef       	ldi	r24, 0xFF	; 255
  f6:	99 e6       	ldi	r25, 0x69	; 105
  f8:	a8 e1       	ldi	r26, 0x18	; 24
  fa:	81 50       	subi	r24, 0x01	; 1
  fc:	90 40       	sbci	r25, 0x00	; 0
  fe:	a0 40       	sbci	r26, 0x00	; 0
 100:	e1 f7       	brne	.-8      	; 0xfa <main+0x5a>
 102:	00 c0       	rjmp	.+0      	; 0x104 <main+0x64>
 104:	00 00       	nop
 106:	cf 5f       	subi	r28, 0xFF	; 255
 108:	c8 30       	cpi	r28, 0x08	; 8
 10a:	81 f7       	brne	.-32     	; 0xec <main+0x4c>
 10c:	ea cf       	rjmp	.-44     	; 0xe2 <main+0x42>

0000010e <DIO_vsetPINDir>:
#include <avr/io.h>
#include "DIO.h"
#include "std_macros.h"
void DIO_vsetPINDir(unsigned char portname,unsigned char pinnumber,unsigned char direction)
{
	switch(portname)
 10e:	82 34       	cpi	r24, 0x42	; 66
 110:	51 f1       	breq	.+84     	; 0x166 <DIO_vsetPINDir+0x58>
 112:	83 34       	cpi	r24, 0x43	; 67
 114:	20 f4       	brcc	.+8      	; 0x11e <DIO_vsetPINDir+0x10>
 116:	81 34       	cpi	r24, 0x41	; 65
 118:	09 f0       	breq	.+2      	; 0x11c <DIO_vsetPINDir+0xe>
 11a:	7b c0       	rjmp	.+246    	; 0x212 <DIO_vsetPINDir+0x104>
 11c:	07 c0       	rjmp	.+14     	; 0x12c <DIO_vsetPINDir+0x1e>
 11e:	83 34       	cpi	r24, 0x43	; 67
 120:	09 f4       	brne	.+2      	; 0x124 <DIO_vsetPINDir+0x16>
 122:	3e c0       	rjmp	.+124    	; 0x1a0 <DIO_vsetPINDir+0x92>
 124:	84 34       	cpi	r24, 0x44	; 68
 126:	09 f0       	breq	.+2      	; 0x12a <DIO_vsetPINDir+0x1c>
 128:	74 c0       	rjmp	.+232    	; 0x212 <DIO_vsetPINDir+0x104>
 12a:	57 c0       	rjmp	.+174    	; 0x1da <DIO_vsetPINDir+0xcc>
	{
		
		
		case 'A':
		if(direction==1)
 12c:	41 30       	cpi	r20, 0x01	; 1
 12e:	69 f4       	brne	.+26     	; 0x14a <DIO_vsetPINDir+0x3c>
		{
			SET_BIT(DDRA,pinnumber);//Set the direction of the given pin in port A as output
 130:	2a b3       	in	r18, 0x1a	; 26
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	ac 01       	movw	r20, r24
 138:	02 c0       	rjmp	.+4      	; 0x13e <DIO_vsetPINDir+0x30>
 13a:	44 0f       	add	r20, r20
 13c:	55 1f       	adc	r21, r21
 13e:	6a 95       	dec	r22
 140:	e2 f7       	brpl	.-8      	; 0x13a <DIO_vsetPINDir+0x2c>
 142:	ba 01       	movw	r22, r20
 144:	62 2b       	or	r22, r18
 146:	6a bb       	out	0x1a, r22	; 26
 148:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRA,pinnumber);//Set the direction of the given pin in port A as input
 14a:	2a b3       	in	r18, 0x1a	; 26
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	ac 01       	movw	r20, r24
 152:	02 c0       	rjmp	.+4      	; 0x158 <DIO_vsetPINDir+0x4a>
 154:	44 0f       	add	r20, r20
 156:	55 1f       	adc	r21, r21
 158:	6a 95       	dec	r22
 15a:	e2 f7       	brpl	.-8      	; 0x154 <DIO_vsetPINDir+0x46>
 15c:	ba 01       	movw	r22, r20
 15e:	60 95       	com	r22
 160:	62 23       	and	r22, r18
 162:	6a bb       	out	0x1a, r22	; 26
 164:	08 95       	ret
		}
		break;
		case 'B':
		if(direction==1)
 166:	41 30       	cpi	r20, 0x01	; 1
 168:	69 f4       	brne	.+26     	; 0x184 <DIO_vsetPINDir+0x76>
		{
			SET_BIT(DDRB,pinnumber);//Set the direction of the given pin in port B as output
 16a:	27 b3       	in	r18, 0x17	; 23
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	ac 01       	movw	r20, r24
 172:	02 c0       	rjmp	.+4      	; 0x178 <DIO_vsetPINDir+0x6a>
 174:	44 0f       	add	r20, r20
 176:	55 1f       	adc	r21, r21
 178:	6a 95       	dec	r22
 17a:	e2 f7       	brpl	.-8      	; 0x174 <DIO_vsetPINDir+0x66>
 17c:	ba 01       	movw	r22, r20
 17e:	62 2b       	or	r22, r18
 180:	67 bb       	out	0x17, r22	; 23
 182:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRB,pinnumber);//Set the direction of the given pin in port B as input
 184:	27 b3       	in	r18, 0x17	; 23
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	ac 01       	movw	r20, r24
 18c:	02 c0       	rjmp	.+4      	; 0x192 <DIO_vsetPINDir+0x84>
 18e:	44 0f       	add	r20, r20
 190:	55 1f       	adc	r21, r21
 192:	6a 95       	dec	r22
 194:	e2 f7       	brpl	.-8      	; 0x18e <DIO_vsetPINDir+0x80>
 196:	ba 01       	movw	r22, r20
 198:	60 95       	com	r22
 19a:	62 23       	and	r22, r18
 19c:	67 bb       	out	0x17, r22	; 23
 19e:	08 95       	ret
		}
		break;
		case 'C':
		if(direction==1)
 1a0:	41 30       	cpi	r20, 0x01	; 1
 1a2:	69 f4       	brne	.+26     	; 0x1be <DIO_vsetPINDir+0xb0>
		{
			SET_BIT(DDRC,pinnumber);//Set the direction of the given pin in port C as output
 1a4:	24 b3       	in	r18, 0x14	; 20
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	ac 01       	movw	r20, r24
 1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <DIO_vsetPINDir+0xa4>
 1ae:	44 0f       	add	r20, r20
 1b0:	55 1f       	adc	r21, r21
 1b2:	6a 95       	dec	r22
 1b4:	e2 f7       	brpl	.-8      	; 0x1ae <DIO_vsetPINDir+0xa0>
 1b6:	ba 01       	movw	r22, r20
 1b8:	62 2b       	or	r22, r18
 1ba:	64 bb       	out	0x14, r22	; 20
 1bc:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRC,pinnumber);//Set the direction of the given pin in port C as input
 1be:	24 b3       	in	r18, 0x14	; 20
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	ac 01       	movw	r20, r24
 1c6:	02 c0       	rjmp	.+4      	; 0x1cc <DIO_vsetPINDir+0xbe>
 1c8:	44 0f       	add	r20, r20
 1ca:	55 1f       	adc	r21, r21
 1cc:	6a 95       	dec	r22
 1ce:	e2 f7       	brpl	.-8      	; 0x1c8 <DIO_vsetPINDir+0xba>
 1d0:	ba 01       	movw	r22, r20
 1d2:	60 95       	com	r22
 1d4:	62 23       	and	r22, r18
 1d6:	64 bb       	out	0x14, r22	; 20
 1d8:	08 95       	ret
		}
		break;
		case 'D':
		if(direction==1)
 1da:	41 30       	cpi	r20, 0x01	; 1
 1dc:	69 f4       	brne	.+26     	; 0x1f8 <DIO_vsetPINDir+0xea>
		{
			SET_BIT(DDRD,pinnumber);//Set the direction of the given pin in port D as output
 1de:	21 b3       	in	r18, 0x11	; 17
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	ac 01       	movw	r20, r24
 1e6:	02 c0       	rjmp	.+4      	; 0x1ec <DIO_vsetPINDir+0xde>
 1e8:	44 0f       	add	r20, r20
 1ea:	55 1f       	adc	r21, r21
 1ec:	6a 95       	dec	r22
 1ee:	e2 f7       	brpl	.-8      	; 0x1e8 <DIO_vsetPINDir+0xda>
 1f0:	ba 01       	movw	r22, r20
 1f2:	62 2b       	or	r22, r18
 1f4:	61 bb       	out	0x11, r22	; 17
 1f6:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRD,pinnumber);//Set the direction of the given pin in port D as input
 1f8:	21 b3       	in	r18, 0x11	; 17
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	ac 01       	movw	r20, r24
 200:	02 c0       	rjmp	.+4      	; 0x206 <DIO_vsetPINDir+0xf8>
 202:	44 0f       	add	r20, r20
 204:	55 1f       	adc	r21, r21
 206:	6a 95       	dec	r22
 208:	e2 f7       	brpl	.-8      	; 0x202 <DIO_vsetPINDir+0xf4>
 20a:	ba 01       	movw	r22, r20
 20c:	60 95       	com	r22
 20e:	62 23       	and	r22, r18
 210:	61 bb       	out	0x11, r22	; 17
 212:	08 95       	ret

00000214 <DIO_write>:
}


void DIO_write(unsigned char portname,unsigned char pinnumber,unsigned char outputvalue)
{
	switch(portname)
 214:	82 34       	cpi	r24, 0x42	; 66
 216:	51 f1       	breq	.+84     	; 0x26c <DIO_write+0x58>
 218:	83 34       	cpi	r24, 0x43	; 67
 21a:	20 f4       	brcc	.+8      	; 0x224 <DIO_write+0x10>
 21c:	81 34       	cpi	r24, 0x41	; 65
 21e:	09 f0       	breq	.+2      	; 0x222 <DIO_write+0xe>
 220:	7b c0       	rjmp	.+246    	; 0x318 <DIO_write+0x104>
 222:	07 c0       	rjmp	.+14     	; 0x232 <DIO_write+0x1e>
 224:	83 34       	cpi	r24, 0x43	; 67
 226:	09 f4       	brne	.+2      	; 0x22a <DIO_write+0x16>
 228:	3e c0       	rjmp	.+124    	; 0x2a6 <DIO_write+0x92>
 22a:	84 34       	cpi	r24, 0x44	; 68
 22c:	09 f0       	breq	.+2      	; 0x230 <DIO_write+0x1c>
 22e:	74 c0       	rjmp	.+232    	; 0x318 <DIO_write+0x104>
 230:	57 c0       	rjmp	.+174    	; 0x2e0 <DIO_write+0xcc>
	{
		case 'A' :
		
		if(outputvalue==1)
 232:	41 30       	cpi	r20, 0x01	; 1
 234:	69 f4       	brne	.+26     	; 0x250 <DIO_write+0x3c>
		{
			SET_BIT(PORTA,pinnumber);//Set the value of the given pin in port A as High
 236:	2b b3       	in	r18, 0x1b	; 27
 238:	81 e0       	ldi	r24, 0x01	; 1
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	ac 01       	movw	r20, r24
 23e:	02 c0       	rjmp	.+4      	; 0x244 <DIO_write+0x30>
 240:	44 0f       	add	r20, r20
 242:	55 1f       	adc	r21, r21
 244:	6a 95       	dec	r22
 246:	e2 f7       	brpl	.-8      	; 0x240 <DIO_write+0x2c>
 248:	ba 01       	movw	r22, r20
 24a:	62 2b       	or	r22, r18
 24c:	6b bb       	out	0x1b, r22	; 27
 24e:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);//Set the value of the given pin in port A as Low
 250:	2b b3       	in	r18, 0x1b	; 27
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	ac 01       	movw	r20, r24
 258:	02 c0       	rjmp	.+4      	; 0x25e <DIO_write+0x4a>
 25a:	44 0f       	add	r20, r20
 25c:	55 1f       	adc	r21, r21
 25e:	6a 95       	dec	r22
 260:	e2 f7       	brpl	.-8      	; 0x25a <DIO_write+0x46>
 262:	ba 01       	movw	r22, r20
 264:	60 95       	com	r22
 266:	62 23       	and	r22, r18
 268:	6b bb       	out	0x1b, r22	; 27
 26a:	08 95       	ret
		}
		break ;
		case 'B':
		
		if(outputvalue==1)
 26c:	41 30       	cpi	r20, 0x01	; 1
 26e:	69 f4       	brne	.+26     	; 0x28a <DIO_write+0x76>
		{
			SET_BIT(PORTB,pinnumber);//Set the value of the given pin in port B as High
 270:	28 b3       	in	r18, 0x18	; 24
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	ac 01       	movw	r20, r24
 278:	02 c0       	rjmp	.+4      	; 0x27e <DIO_write+0x6a>
 27a:	44 0f       	add	r20, r20
 27c:	55 1f       	adc	r21, r21
 27e:	6a 95       	dec	r22
 280:	e2 f7       	brpl	.-8      	; 0x27a <DIO_write+0x66>
 282:	ba 01       	movw	r22, r20
 284:	62 2b       	or	r22, r18
 286:	68 bb       	out	0x18, r22	; 24
 288:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);//Set the value of the given pin in port B as Low
 28a:	28 b3       	in	r18, 0x18	; 24
 28c:	81 e0       	ldi	r24, 0x01	; 1
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	ac 01       	movw	r20, r24
 292:	02 c0       	rjmp	.+4      	; 0x298 <DIO_write+0x84>
 294:	44 0f       	add	r20, r20
 296:	55 1f       	adc	r21, r21
 298:	6a 95       	dec	r22
 29a:	e2 f7       	brpl	.-8      	; 0x294 <DIO_write+0x80>
 29c:	ba 01       	movw	r22, r20
 29e:	60 95       	com	r22
 2a0:	62 23       	and	r22, r18
 2a2:	68 bb       	out	0x18, r22	; 24
 2a4:	08 95       	ret
		}
		break ;
		case 'C' :
		
		if(outputvalue==1)
 2a6:	41 30       	cpi	r20, 0x01	; 1
 2a8:	69 f4       	brne	.+26     	; 0x2c4 <DIO_write+0xb0>
		{
			SET_BIT(PORTC,pinnumber);//Set the value of the given pin in port C as High
 2aa:	25 b3       	in	r18, 0x15	; 21
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	ac 01       	movw	r20, r24
 2b2:	02 c0       	rjmp	.+4      	; 0x2b8 <DIO_write+0xa4>
 2b4:	44 0f       	add	r20, r20
 2b6:	55 1f       	adc	r21, r21
 2b8:	6a 95       	dec	r22
 2ba:	e2 f7       	brpl	.-8      	; 0x2b4 <DIO_write+0xa0>
 2bc:	ba 01       	movw	r22, r20
 2be:	62 2b       	or	r22, r18
 2c0:	65 bb       	out	0x15, r22	; 21
 2c2:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTC,pinnumber);//Set the value of the given pin in port C as Low
 2c4:	25 b3       	in	r18, 0x15	; 21
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	ac 01       	movw	r20, r24
 2cc:	02 c0       	rjmp	.+4      	; 0x2d2 <DIO_write+0xbe>
 2ce:	44 0f       	add	r20, r20
 2d0:	55 1f       	adc	r21, r21
 2d2:	6a 95       	dec	r22
 2d4:	e2 f7       	brpl	.-8      	; 0x2ce <DIO_write+0xba>
 2d6:	ba 01       	movw	r22, r20
 2d8:	60 95       	com	r22
 2da:	62 23       	and	r22, r18
 2dc:	65 bb       	out	0x15, r22	; 21
 2de:	08 95       	ret
		}
		break ;
		case 'D':
		
		if(outputvalue==1)
 2e0:	41 30       	cpi	r20, 0x01	; 1
 2e2:	69 f4       	brne	.+26     	; 0x2fe <DIO_write+0xea>
		{
			SET_BIT(PORTD,pinnumber);//Set the value of the given pin in port D as High
 2e4:	22 b3       	in	r18, 0x12	; 18
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	ac 01       	movw	r20, r24
 2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <DIO_write+0xde>
 2ee:	44 0f       	add	r20, r20
 2f0:	55 1f       	adc	r21, r21
 2f2:	6a 95       	dec	r22
 2f4:	e2 f7       	brpl	.-8      	; 0x2ee <DIO_write+0xda>
 2f6:	ba 01       	movw	r22, r20
 2f8:	62 2b       	or	r22, r18
 2fa:	62 bb       	out	0x12, r22	; 18
 2fc:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);//Set the value of the given pin in port D as Low
 2fe:	22 b3       	in	r18, 0x12	; 18
 300:	81 e0       	ldi	r24, 0x01	; 1
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	ac 01       	movw	r20, r24
 306:	02 c0       	rjmp	.+4      	; 0x30c <DIO_write+0xf8>
 308:	44 0f       	add	r20, r20
 30a:	55 1f       	adc	r21, r21
 30c:	6a 95       	dec	r22
 30e:	e2 f7       	brpl	.-8      	; 0x308 <DIO_write+0xf4>
 310:	ba 01       	movw	r22, r20
 312:	60 95       	com	r22
 314:	62 23       	and	r22, r18
 316:	62 bb       	out	0x12, r22	; 18
 318:	08 95       	ret

0000031a <DIO_u8read>:


unsigned char DIO_u8read(unsigned char portname,unsigned char pinnumber)
{
	unsigned char return_value=0;
	switch(portname)
 31a:	82 34       	cpi	r24, 0x42	; 66
 31c:	f1 f0       	breq	.+60     	; 0x35a <DIO_u8read+0x40>
 31e:	83 34       	cpi	r24, 0x43	; 67
 320:	20 f4       	brcc	.+8      	; 0x32a <DIO_u8read+0x10>
 322:	81 34       	cpi	r24, 0x41	; 65
 324:	09 f0       	breq	.+2      	; 0x328 <DIO_u8read+0xe>
 326:	4f c0       	rjmp	.+158    	; 0x3c6 <DIO_u8read+0xac>
 328:	06 c0       	rjmp	.+12     	; 0x336 <DIO_u8read+0x1c>
 32a:	83 34       	cpi	r24, 0x43	; 67
 32c:	41 f1       	breq	.+80     	; 0x37e <DIO_u8read+0x64>
 32e:	84 34       	cpi	r24, 0x44	; 68
 330:	09 f0       	breq	.+2      	; 0x334 <DIO_u8read+0x1a>
 332:	49 c0       	rjmp	.+146    	; 0x3c6 <DIO_u8read+0xac>
 334:	36 c0       	rjmp	.+108    	; 0x3a2 <DIO_u8read+0x88>
	{
		case 'A' :
		return_value=READ_BIT(PINA,pinnumber);//Read the value from the given pin in port A
 336:	29 b3       	in	r18, 0x19	; 25
 338:	81 e0       	ldi	r24, 0x01	; 1
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	06 2e       	mov	r0, r22
 33e:	02 c0       	rjmp	.+4      	; 0x344 <DIO_u8read+0x2a>
 340:	88 0f       	add	r24, r24
 342:	99 1f       	adc	r25, r25
 344:	0a 94       	dec	r0
 346:	e2 f7       	brpl	.-8      	; 0x340 <DIO_u8read+0x26>
 348:	30 e0       	ldi	r19, 0x00	; 0
 34a:	82 23       	and	r24, r18
 34c:	93 23       	and	r25, r19
 34e:	02 c0       	rjmp	.+4      	; 0x354 <DIO_u8read+0x3a>
 350:	95 95       	asr	r25
 352:	87 95       	ror	r24
 354:	6a 95       	dec	r22
 356:	e2 f7       	brpl	.-8      	; 0x350 <DIO_u8read+0x36>
		break;
 358:	08 95       	ret
		
		case 'B' :
		return_value=READ_BIT(PINB,pinnumber);//Read the value from the given pin in port B
 35a:	26 b3       	in	r18, 0x16	; 22
 35c:	81 e0       	ldi	r24, 0x01	; 1
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	06 2e       	mov	r0, r22
 362:	02 c0       	rjmp	.+4      	; 0x368 <DIO_u8read+0x4e>
 364:	88 0f       	add	r24, r24
 366:	99 1f       	adc	r25, r25
 368:	0a 94       	dec	r0
 36a:	e2 f7       	brpl	.-8      	; 0x364 <DIO_u8read+0x4a>
 36c:	30 e0       	ldi	r19, 0x00	; 0
 36e:	82 23       	and	r24, r18
 370:	93 23       	and	r25, r19
 372:	02 c0       	rjmp	.+4      	; 0x378 <DIO_u8read+0x5e>
 374:	95 95       	asr	r25
 376:	87 95       	ror	r24
 378:	6a 95       	dec	r22
 37a:	e2 f7       	brpl	.-8      	; 0x374 <DIO_u8read+0x5a>
		break;
 37c:	08 95       	ret
		
		case 'C' :
		return_value=READ_BIT(PINC,pinnumber);//Read the value from the given pin in port C
 37e:	23 b3       	in	r18, 0x13	; 19
 380:	81 e0       	ldi	r24, 0x01	; 1
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	06 2e       	mov	r0, r22
 386:	02 c0       	rjmp	.+4      	; 0x38c <DIO_u8read+0x72>
 388:	88 0f       	add	r24, r24
 38a:	99 1f       	adc	r25, r25
 38c:	0a 94       	dec	r0
 38e:	e2 f7       	brpl	.-8      	; 0x388 <DIO_u8read+0x6e>
 390:	30 e0       	ldi	r19, 0x00	; 0
 392:	82 23       	and	r24, r18
 394:	93 23       	and	r25, r19
 396:	02 c0       	rjmp	.+4      	; 0x39c <DIO_u8read+0x82>
 398:	95 95       	asr	r25
 39a:	87 95       	ror	r24
 39c:	6a 95       	dec	r22
 39e:	e2 f7       	brpl	.-8      	; 0x398 <DIO_u8read+0x7e>
		break;
 3a0:	08 95       	ret
		
		case 'D' :
		return_value=READ_BIT(PIND,pinnumber);//Read the value from the given pin in port D
 3a2:	20 b3       	in	r18, 0x10	; 16
 3a4:	81 e0       	ldi	r24, 0x01	; 1
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	06 2e       	mov	r0, r22
 3aa:	02 c0       	rjmp	.+4      	; 0x3b0 <DIO_u8read+0x96>
 3ac:	88 0f       	add	r24, r24
 3ae:	99 1f       	adc	r25, r25
 3b0:	0a 94       	dec	r0
 3b2:	e2 f7       	brpl	.-8      	; 0x3ac <DIO_u8read+0x92>
 3b4:	30 e0       	ldi	r19, 0x00	; 0
 3b6:	82 23       	and	r24, r18
 3b8:	93 23       	and	r25, r19
 3ba:	02 c0       	rjmp	.+4      	; 0x3c0 <DIO_u8read+0xa6>
 3bc:	95 95       	asr	r25
 3be:	87 95       	ror	r24
 3c0:	6a 95       	dec	r22
 3c2:	e2 f7       	brpl	.-8      	; 0x3bc <DIO_u8read+0xa2>
		break;
 3c4:	08 95       	ret
}


unsigned char DIO_u8read(unsigned char portname,unsigned char pinnumber)
{
	unsigned char return_value=0;
 3c6:	80 e0       	ldi	r24, 0x00	; 0
		break;
		default: 
		break;
	}
	return return_value ;
}
 3c8:	08 95       	ret

000003ca <DIO_toggle>:
void DIO_toggle(unsigned char portname,unsigned char pinnumber)
{
	switch(portname)
 3ca:	82 34       	cpi	r24, 0x42	; 66
 3cc:	b9 f0       	breq	.+46     	; 0x3fc <DIO_toggle+0x32>
 3ce:	83 34       	cpi	r24, 0x43	; 67
 3d0:	18 f4       	brcc	.+6      	; 0x3d8 <DIO_toggle+0xe>
 3d2:	81 34       	cpi	r24, 0x41	; 65
 3d4:	c9 f5       	brne	.+114    	; 0x448 <DIO_toggle+0x7e>
 3d6:	05 c0       	rjmp	.+10     	; 0x3e2 <DIO_toggle+0x18>
 3d8:	83 34       	cpi	r24, 0x43	; 67
 3da:	e9 f0       	breq	.+58     	; 0x416 <DIO_toggle+0x4c>
 3dc:	84 34       	cpi	r24, 0x44	; 68
 3de:	a1 f5       	brne	.+104    	; 0x448 <DIO_toggle+0x7e>
 3e0:	27 c0       	rjmp	.+78     	; 0x430 <DIO_toggle+0x66>
	{
		case 'A':
		TOG_BIT(PORTA,pinnumber);//Toggle the value of the given pin in port A
 3e2:	2b b3       	in	r18, 0x1b	; 27
 3e4:	81 e0       	ldi	r24, 0x01	; 1
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	ac 01       	movw	r20, r24
 3ea:	02 c0       	rjmp	.+4      	; 0x3f0 <DIO_toggle+0x26>
 3ec:	44 0f       	add	r20, r20
 3ee:	55 1f       	adc	r21, r21
 3f0:	6a 95       	dec	r22
 3f2:	e2 f7       	brpl	.-8      	; 0x3ec <DIO_toggle+0x22>
 3f4:	ba 01       	movw	r22, r20
 3f6:	62 27       	eor	r22, r18
 3f8:	6b bb       	out	0x1b, r22	; 27
		break;
 3fa:	08 95       	ret
		case 'B':
		TOG_BIT(PORTB,pinnumber);//Toggle the value of the given pin in port B
 3fc:	28 b3       	in	r18, 0x18	; 24
 3fe:	81 e0       	ldi	r24, 0x01	; 1
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	ac 01       	movw	r20, r24
 404:	02 c0       	rjmp	.+4      	; 0x40a <DIO_toggle+0x40>
 406:	44 0f       	add	r20, r20
 408:	55 1f       	adc	r21, r21
 40a:	6a 95       	dec	r22
 40c:	e2 f7       	brpl	.-8      	; 0x406 <DIO_toggle+0x3c>
 40e:	ba 01       	movw	r22, r20
 410:	62 27       	eor	r22, r18
 412:	68 bb       	out	0x18, r22	; 24
		break;
 414:	08 95       	ret
		case 'C':
		TOG_BIT(PORTC,pinnumber);//Toggle the value of the given pin in port C
 416:	25 b3       	in	r18, 0x15	; 21
 418:	81 e0       	ldi	r24, 0x01	; 1
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	ac 01       	movw	r20, r24
 41e:	02 c0       	rjmp	.+4      	; 0x424 <DIO_toggle+0x5a>
 420:	44 0f       	add	r20, r20
 422:	55 1f       	adc	r21, r21
 424:	6a 95       	dec	r22
 426:	e2 f7       	brpl	.-8      	; 0x420 <DIO_toggle+0x56>
 428:	ba 01       	movw	r22, r20
 42a:	62 27       	eor	r22, r18
 42c:	65 bb       	out	0x15, r22	; 21
		break;
 42e:	08 95       	ret
		case 'D':
		TOG_BIT(PORTD,pinnumber);//Toggle the value of the given pin in port D
 430:	22 b3       	in	r18, 0x12	; 18
 432:	81 e0       	ldi	r24, 0x01	; 1
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	ac 01       	movw	r20, r24
 438:	02 c0       	rjmp	.+4      	; 0x43e <DIO_toggle+0x74>
 43a:	44 0f       	add	r20, r20
 43c:	55 1f       	adc	r21, r21
 43e:	6a 95       	dec	r22
 440:	e2 f7       	brpl	.-8      	; 0x43a <DIO_toggle+0x70>
 442:	ba 01       	movw	r22, r20
 444:	62 27       	eor	r22, r18
 446:	62 bb       	out	0x12, r22	; 18
 448:	08 95       	ret

0000044a <DIO_set_port_direction>:
		default: break;
	}
}
void DIO_set_port_direction(unsigned char portname,unsigned char direction)
{
	switch(portname)
 44a:	82 34       	cpi	r24, 0x42	; 66
 44c:	61 f0       	breq	.+24     	; 0x466 <DIO_set_port_direction+0x1c>
 44e:	83 34       	cpi	r24, 0x43	; 67
 450:	18 f4       	brcc	.+6      	; 0x458 <DIO_set_port_direction+0xe>
 452:	81 34       	cpi	r24, 0x41	; 65
 454:	69 f4       	brne	.+26     	; 0x470 <DIO_set_port_direction+0x26>
 456:	05 c0       	rjmp	.+10     	; 0x462 <DIO_set_port_direction+0x18>
 458:	83 34       	cpi	r24, 0x43	; 67
 45a:	39 f0       	breq	.+14     	; 0x46a <DIO_set_port_direction+0x20>
 45c:	84 34       	cpi	r24, 0x44	; 68
 45e:	41 f4       	brne	.+16     	; 0x470 <DIO_set_port_direction+0x26>
 460:	06 c0       	rjmp	.+12     	; 0x46e <DIO_set_port_direction+0x24>
	{
		case 'A' :
		DDRA=direction; //set the direction of port A
 462:	6a bb       	out	0x1a, r22	; 26
		break ;
 464:	08 95       	ret
		case 'B':
		DDRB=direction; //set the direction of port B
 466:	67 bb       	out	0x17, r22	; 23
		break ;
 468:	08 95       	ret
		case 'C' :
		DDRC=direction; //set the direction of port C
 46a:	64 bb       	out	0x14, r22	; 20
		break ;
 46c:	08 95       	ret
		case 'D':
		DDRD=direction; //set the direction of port D
 46e:	61 bb       	out	0x11, r22	; 17
 470:	08 95       	ret

00000472 <DIO_write_port>:
	}
	
}
void DIO_write_port(unsigned char portname,unsigned char portvalue)
{
	switch(portname)
 472:	82 34       	cpi	r24, 0x42	; 66
 474:	61 f0       	breq	.+24     	; 0x48e <DIO_write_port+0x1c>
 476:	83 34       	cpi	r24, 0x43	; 67
 478:	18 f4       	brcc	.+6      	; 0x480 <DIO_write_port+0xe>
 47a:	81 34       	cpi	r24, 0x41	; 65
 47c:	69 f4       	brne	.+26     	; 0x498 <DIO_write_port+0x26>
 47e:	05 c0       	rjmp	.+10     	; 0x48a <DIO_write_port+0x18>
 480:	83 34       	cpi	r24, 0x43	; 67
 482:	39 f0       	breq	.+14     	; 0x492 <DIO_write_port+0x20>
 484:	84 34       	cpi	r24, 0x44	; 68
 486:	41 f4       	brne	.+16     	; 0x498 <DIO_write_port+0x26>
 488:	06 c0       	rjmp	.+12     	; 0x496 <DIO_write_port+0x24>
	{
		case 'A' :
		PORTA=portvalue; //Write the given value to the port A
 48a:	6b bb       	out	0x1b, r22	; 27
		break ;
 48c:	08 95       	ret
		case 'B':
		PORTB=portvalue; //Write the given value to the port B
 48e:	68 bb       	out	0x18, r22	; 24
		break ;
 490:	08 95       	ret
		case 'C' :
		PORTC=portvalue; //Write the given value to the port C
 492:	65 bb       	out	0x15, r22	; 21
		break ;
 494:	08 95       	ret
		case 'D':
		PORTD=portvalue; //Write the given value to the port D
 496:	62 bb       	out	0x12, r22	; 18
 498:	08 95       	ret

0000049a <DIO_read_port>:
}

unsigned char DIO_read_port(unsigned char portname)
{
	unsigned char return_val=0;
	switch(portname)
 49a:	82 34       	cpi	r24, 0x42	; 66
 49c:	61 f0       	breq	.+24     	; 0x4b6 <DIO_read_port+0x1c>
 49e:	83 34       	cpi	r24, 0x43	; 67
 4a0:	18 f4       	brcc	.+6      	; 0x4a8 <DIO_read_port+0xe>
 4a2:	81 34       	cpi	r24, 0x41	; 65
 4a4:	71 f4       	brne	.+28     	; 0x4c2 <DIO_read_port+0x28>
 4a6:	05 c0       	rjmp	.+10     	; 0x4b2 <DIO_read_port+0x18>
 4a8:	83 34       	cpi	r24, 0x43	; 67
 4aa:	39 f0       	breq	.+14     	; 0x4ba <DIO_read_port+0x20>
 4ac:	84 34       	cpi	r24, 0x44	; 68
 4ae:	49 f4       	brne	.+18     	; 0x4c2 <DIO_read_port+0x28>
 4b0:	06 c0       	rjmp	.+12     	; 0x4be <DIO_read_port+0x24>
	{
		case 'A' :
		return_val=PINA; // read the value of port A 
 4b2:	89 b3       	in	r24, 0x19	; 25
		break ;
 4b4:	08 95       	ret
		case 'B':
		return_val=PINB; // read the value of port B 
 4b6:	86 b3       	in	r24, 0x16	; 22
		break ;
 4b8:	08 95       	ret
		case 'C' :
		return_val=PINC; // read the value of port C 
 4ba:	83 b3       	in	r24, 0x13	; 19
		break ;
 4bc:	08 95       	ret
		case 'D':
		return_val=PIND; // read the value of port D 
 4be:	80 b3       	in	r24, 0x10	; 16
		break ;
 4c0:	08 95       	ret
	}
}

unsigned char DIO_read_port(unsigned char portname)
{
	unsigned char return_val=0;
 4c2:	80 e0       	ldi	r24, 0x00	; 0
		break ;
		default:
		break ;
	}
	return return_val;
 4c4:	08 95       	ret

000004c6 <LED_vInit>:
 4c6:	41 e0       	ldi	r20, 0x01	; 1
 4c8:	0e 94 87 00 	call	0x10e	; 0x10e <DIO_vsetPINDir>
 4cc:	08 95       	ret

000004ce <LED_vTurnOn>:
 4ce:	41 e0       	ldi	r20, 0x01	; 1
 4d0:	0e 94 0a 01 	call	0x214	; 0x214 <DIO_write>
 4d4:	08 95       	ret

000004d6 <LED_vTurnOff>:
 4d6:	40 e0       	ldi	r20, 0x00	; 0
 4d8:	0e 94 0a 01 	call	0x214	; 0x214 <DIO_write>
 4dc:	08 95       	ret

000004de <LED_vToggle>:
 4de:	0e 94 e5 01 	call	0x3ca	; 0x3ca <DIO_toggle>
 4e2:	08 95       	ret

000004e4 <LED_u8ReadStatus>:
 4e4:	0e 94 8d 01 	call	0x31a	; 0x31a <DIO_u8read>
 4e8:	08 95       	ret

000004ea <_exit>:
 4ea:	f8 94       	cli

000004ec <__stop_program>:
 4ec:	ff cf       	rjmp	.-2      	; 0x4ec <__stop_program>
