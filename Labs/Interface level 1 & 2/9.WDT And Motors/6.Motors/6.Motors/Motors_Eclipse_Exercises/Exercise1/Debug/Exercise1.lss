
Exercise1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000016a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000003a8  00000000  00000000  000001c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000686  00000000  00000000  00000568  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 b3 00 	jmp	0x166	; 0x166 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
 */

#include <avr/io.h>

int main(void)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
	/* configure pin PA0, PA1 and PA2 as input pins */ 
	DDRA &= ~(1<<PA0);
  74:	aa e3       	ldi	r26, 0x3A	; 58
  76:	b0 e0       	ldi	r27, 0x00	; 0
  78:	ea e3       	ldi	r30, 0x3A	; 58
  7a:	f0 e0       	ldi	r31, 0x00	; 0
  7c:	80 81       	ld	r24, Z
  7e:	8e 7f       	andi	r24, 0xFE	; 254
  80:	8c 93       	st	X, r24
	DDRA &= ~(1<<PA1);
  82:	aa e3       	ldi	r26, 0x3A	; 58
  84:	b0 e0       	ldi	r27, 0x00	; 0
  86:	ea e3       	ldi	r30, 0x3A	; 58
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	80 81       	ld	r24, Z
  8c:	8d 7f       	andi	r24, 0xFD	; 253
  8e:	8c 93       	st	X, r24
	DDRA &= ~(1<<PA2);
  90:	aa e3       	ldi	r26, 0x3A	; 58
  92:	b0 e0       	ldi	r27, 0x00	; 0
  94:	ea e3       	ldi	r30, 0x3A	; 58
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	80 81       	ld	r24, Z
  9a:	8b 7f       	andi	r24, 0xFB	; 251
  9c:	8c 93       	st	X, r24
	
	/* configure pin PC0 and PC1 as output pins */
	DDRC |= (1<<PC0);
  9e:	a4 e3       	ldi	r26, 0x34	; 52
  a0:	b0 e0       	ldi	r27, 0x00	; 0
  a2:	e4 e3       	ldi	r30, 0x34	; 52
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	80 81       	ld	r24, Z
  a8:	81 60       	ori	r24, 0x01	; 1
  aa:	8c 93       	st	X, r24
	DDRC |= (1<<PC1);
  ac:	a4 e3       	ldi	r26, 0x34	; 52
  ae:	b0 e0       	ldi	r27, 0x00	; 0
  b0:	e4 e3       	ldi	r30, 0x34	; 52
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	82 60       	ori	r24, 0x02	; 2
  b8:	8c 93       	st	X, r24
	
	/* Motor is stop at the beginning */
	PORTC &= ~(1<<PC0);
  ba:	a5 e3       	ldi	r26, 0x35	; 53
  bc:	b0 e0       	ldi	r27, 0x00	; 0
  be:	e5 e3       	ldi	r30, 0x35	; 53
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	8e 7f       	andi	r24, 0xFE	; 254
  c6:	8c 93       	st	X, r24
	PORTC &= ~(1<<PC1);
  c8:	a5 e3       	ldi	r26, 0x35	; 53
  ca:	b0 e0       	ldi	r27, 0x00	; 0
  cc:	e5 e3       	ldi	r30, 0x35	; 53
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	8d 7f       	andi	r24, 0xFD	; 253
  d4:	8c 93       	st	X, r24
	 
    while(1)
    {
		/* check if the first switch is pressed (Rotate clock wise) */
		if(PINA & (1<<PA0))
  d6:	e9 e3       	ldi	r30, 0x39	; 57
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	80 81       	ld	r24, Z
  dc:	88 2f       	mov	r24, r24
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	81 70       	andi	r24, 0x01	; 1
  e2:	90 70       	andi	r25, 0x00	; 0
  e4:	88 23       	and	r24, r24
  e6:	79 f0       	breq	.+30     	; 0x106 <main+0x9a>
		{
			PORTC &= (~(1<<PC0));
  e8:	a5 e3       	ldi	r26, 0x35	; 53
  ea:	b0 e0       	ldi	r27, 0x00	; 0
  ec:	e5 e3       	ldi	r30, 0x35	; 53
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	8e 7f       	andi	r24, 0xFE	; 254
  f4:	8c 93       	st	X, r24
			PORTC |= (1<<PC1);
  f6:	a5 e3       	ldi	r26, 0x35	; 53
  f8:	b0 e0       	ldi	r27, 0x00	; 0
  fa:	e5 e3       	ldi	r30, 0x35	; 53
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	80 81       	ld	r24, Z
 100:	82 60       	ori	r24, 0x02	; 2
 102:	8c 93       	st	X, r24
 104:	e8 cf       	rjmp	.-48     	; 0xd6 <main+0x6a>
		}
		
		/* check if the second switch is pressed (Rotate anti-clock wise) */
		else if(PINA & (1<<PA1))
 106:	e9 e3       	ldi	r30, 0x39	; 57
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	88 2f       	mov	r24, r24
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	82 70       	andi	r24, 0x02	; 2
 112:	90 70       	andi	r25, 0x00	; 0
 114:	00 97       	sbiw	r24, 0x00	; 0
 116:	79 f0       	breq	.+30     	; 0x136 <main+0xca>
		{
			PORTC |= (1<<PC0);
 118:	a5 e3       	ldi	r26, 0x35	; 53
 11a:	b0 e0       	ldi	r27, 0x00	; 0
 11c:	e5 e3       	ldi	r30, 0x35	; 53
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	80 81       	ld	r24, Z
 122:	81 60       	ori	r24, 0x01	; 1
 124:	8c 93       	st	X, r24
			PORTC &= (~(1<<PC1));	
 126:	a5 e3       	ldi	r26, 0x35	; 53
 128:	b0 e0       	ldi	r27, 0x00	; 0
 12a:	e5 e3       	ldi	r30, 0x35	; 53
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	80 81       	ld	r24, Z
 130:	8d 7f       	andi	r24, 0xFD	; 253
 132:	8c 93       	st	X, r24
 134:	d0 cf       	rjmp	.-96     	; 0xd6 <main+0x6a>
		}
				
		/* check if the third switch is pressed (turn off the motor) */
		else if(PINA & (1<<PA2))
 136:	e9 e3       	ldi	r30, 0x39	; 57
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	80 81       	ld	r24, Z
 13c:	88 2f       	mov	r24, r24
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	84 70       	andi	r24, 0x04	; 4
 142:	90 70       	andi	r25, 0x00	; 0
 144:	00 97       	sbiw	r24, 0x00	; 0
 146:	39 f2       	breq	.-114    	; 0xd6 <main+0x6a>
		{
			PORTC &= (~(1<<PC0));
 148:	a5 e3       	ldi	r26, 0x35	; 53
 14a:	b0 e0       	ldi	r27, 0x00	; 0
 14c:	e5 e3       	ldi	r30, 0x35	; 53
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	80 81       	ld	r24, Z
 152:	8e 7f       	andi	r24, 0xFE	; 254
 154:	8c 93       	st	X, r24
			PORTC &= (~(1<<PC1));
 156:	a5 e3       	ldi	r26, 0x35	; 53
 158:	b0 e0       	ldi	r27, 0x00	; 0
 15a:	e5 e3       	ldi	r30, 0x35	; 53
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	80 81       	ld	r24, Z
 160:	8d 7f       	andi	r24, 0xFD	; 253
 162:	8c 93       	st	X, r24
 164:	b8 cf       	rjmp	.-144    	; 0xd6 <main+0x6a>

00000166 <_exit>:
 166:	f8 94       	cli

00000168 <__stop_program>:
 168:	ff cf       	rjmp	.-2      	; 0x168 <__stop_program>
