
omar main drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000043a  000004ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000043a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006cc  00000000  00000000  000004b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000b7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000100  00000000  00000000  00000c08  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008f5  00000000  00000000  00000d08  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000030b  00000000  00000000  000015fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000053c  00000000  00000000  00001908  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000184  00000000  00000000  00001e44  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000228  00000000  00000000  00001fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004cc  00000000  00000000  000021f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e3       	ldi	r30, 0x3A	; 58
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 30       	cpi	r26, 0x00	; 0
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <main>
  9e:	0c 94 1b 02 	jmp	0x436	; 0x436 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <buttonset>:
 */ 
#include "dio.h"

void buttonset(unsigned char portname,unsigned char pinnumber)
{
	diosetpin(portname,pinnumber,0);
  a6:	40 e0       	ldi	r20, 0x00	; 0
  a8:	0e 94 ee 00 	call	0x1dc	; 0x1dc <diosetpin>
}
  ac:	08 95       	ret

000000ae <buttonread>:
unsigned char buttonread(unsigned char portname,unsigned char pinnumber)
{
	unsigned char a;
	a=dioreadpin(portname,pinnumber);
  ae:	0e 94 4d 01 	call	0x29a	; 0x29a <dioreadpin>
	return a ;
  b2:	08 95       	ret

000000b4 <setbuzzer>:
 */ 
#include "dio.h"
void setbuzzer(portname,pinnum){
	
	
	diosetpin(portname,pinnum,1);
  b4:	41 e0       	ldi	r20, 0x01	; 1
  b6:	0e 94 ee 00 	call	0x1dc	; 0x1dc <diosetpin>
}
  ba:	08 95       	ret

000000bc <buzzersound>:
void buzzersound(portname,pinnum){
	diowritepin(portname,pinnum,1);
  bc:	41 e0       	ldi	r20, 0x01	; 1
  be:	0e 94 8f 00 	call	0x11e	; 0x11e <diowritepin>
	
}
  c2:	08 95       	ret

000000c4 <pullupres>:
 */ 
#include<avr/io.h>
#include "std_macros.h"
#include "dio.h"
void pullupres(unsigned char portname,unsigned char pinnum){
	switch(portname){
  c4:	84 34       	cpi	r24, 0x44	; 68
  c6:	f1 f0       	breq	.+60     	; 0x104 <pullupres+0x40>
  c8:	83 36       	cpi	r24, 0x63	; 99
  ca:	79 f0       	breq	.+30     	; 0xea <pullupres+0x26>
  cc:	82 34       	cpi	r24, 0x42	; 66
  ce:	31 f5       	brne	.+76     	; 0x11c <pullupres+0x58>
		case 'B':
		setbit(PORTB,pinnum);
  d0:	25 b1       	in	r18, 0x05	; 5
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	ac 01       	movw	r20, r24
  d8:	02 c0       	rjmp	.+4      	; 0xde <pullupres+0x1a>
  da:	44 0f       	add	r20, r20
  dc:	55 1f       	adc	r21, r21
  de:	6a 95       	dec	r22
  e0:	e2 f7       	brpl	.-8      	; 0xda <pullupres+0x16>
  e2:	ba 01       	movw	r22, r20
  e4:	62 2b       	or	r22, r18
  e6:	65 b9       	out	0x05, r22	; 5
		break;
  e8:	08 95       	ret
		case 'c':
		setbit(PORTC,pinnum);
  ea:	28 b1       	in	r18, 0x08	; 8
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	ac 01       	movw	r20, r24
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <pullupres+0x34>
  f4:	44 0f       	add	r20, r20
  f6:	55 1f       	adc	r21, r21
  f8:	6a 95       	dec	r22
  fa:	e2 f7       	brpl	.-8      	; 0xf4 <pullupres+0x30>
  fc:	ba 01       	movw	r22, r20
  fe:	62 2b       	or	r22, r18
 100:	68 b9       	out	0x08, r22	; 8
		break;
 102:	08 95       	ret
		case 'D':
		setbit(PORTD,pinnum);
 104:	2b b1       	in	r18, 0x0b	; 11
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	ac 01       	movw	r20, r24
 10c:	02 c0       	rjmp	.+4      	; 0x112 <pullupres+0x4e>
 10e:	44 0f       	add	r20, r20
 110:	55 1f       	adc	r21, r21
 112:	6a 95       	dec	r22
 114:	e2 f7       	brpl	.-8      	; 0x10e <pullupres+0x4a>
 116:	ba 01       	movw	r22, r20
 118:	62 2b       	or	r22, r18
 11a:	6b b9       	out	0x0b, r22	; 11
 11c:	08 95       	ret

0000011e <diowritepin>:
	}
	
	
}
void  diowritepin(unsigned char portname ,unsigned char pinnum,unsigned char outputvalue){
	switch(portname)
 11e:	83 34       	cpi	r24, 0x43	; 67
 120:	19 f1       	breq	.+70     	; 0x168 <diowritepin+0x4a>
 122:	84 34       	cpi	r24, 0x44	; 68
 124:	09 f4       	brne	.+2      	; 0x128 <diowritepin+0xa>
 126:	3d c0       	rjmp	.+122    	; 0x1a2 <diowritepin+0x84>
 128:	82 34       	cpi	r24, 0x42	; 66
 12a:	09 f0       	breq	.+2      	; 0x12e <diowritepin+0x10>
 12c:	56 c0       	rjmp	.+172    	; 0x1da <diowritepin+0xbc>
	{
		case'B':
		
		if (outputvalue == 1 ){
 12e:	41 30       	cpi	r20, 0x01	; 1
 130:	69 f4       	brne	.+26     	; 0x14c <diowritepin+0x2e>
		setbit(PORTB,pinnum);
 132:	25 b1       	in	r18, 0x05	; 5
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	ac 01       	movw	r20, r24
 13a:	02 c0       	rjmp	.+4      	; 0x140 <diowritepin+0x22>
 13c:	44 0f       	add	r20, r20
 13e:	55 1f       	adc	r21, r21
 140:	6a 95       	dec	r22
 142:	e2 f7       	brpl	.-8      	; 0x13c <diowritepin+0x1e>
 144:	ba 01       	movw	r22, r20
 146:	62 2b       	or	r22, r18
 148:	65 b9       	out	0x05, r22	; 5
 14a:	08 95       	ret
		}		
		else{
			clearbit(PORTB,pinnum);
 14c:	25 b1       	in	r18, 0x05	; 5
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	ac 01       	movw	r20, r24
 154:	02 c0       	rjmp	.+4      	; 0x15a <diowritepin+0x3c>
 156:	44 0f       	add	r20, r20
 158:	55 1f       	adc	r21, r21
 15a:	6a 95       	dec	r22
 15c:	e2 f7       	brpl	.-8      	; 0x156 <diowritepin+0x38>
 15e:	ba 01       	movw	r22, r20
 160:	60 95       	com	r22
 162:	62 23       	and	r22, r18
 164:	65 b9       	out	0x05, r22	; 5
 166:	08 95       	ret
		
		}				
			break;	
		case'C':
		if (outputvalue ==1 ){
 168:	41 30       	cpi	r20, 0x01	; 1
 16a:	69 f4       	brne	.+26     	; 0x186 <diowritepin+0x68>
		    setbit(PORTC,pinnum);
 16c:	28 b1       	in	r18, 0x08	; 8
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	ac 01       	movw	r20, r24
 174:	02 c0       	rjmp	.+4      	; 0x17a <diowritepin+0x5c>
 176:	44 0f       	add	r20, r20
 178:	55 1f       	adc	r21, r21
 17a:	6a 95       	dec	r22
 17c:	e2 f7       	brpl	.-8      	; 0x176 <diowritepin+0x58>
 17e:	ba 01       	movw	r22, r20
 180:	62 2b       	or	r22, r18
 182:	68 b9       	out	0x08, r22	; 8
 184:	08 95       	ret
		}		
		else{
			clearbit(PORTC,pinnum);}				
 186:	28 b1       	in	r18, 0x08	; 8
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	ac 01       	movw	r20, r24
 18e:	02 c0       	rjmp	.+4      	; 0x194 <diowritepin+0x76>
 190:	44 0f       	add	r20, r20
 192:	55 1f       	adc	r21, r21
 194:	6a 95       	dec	r22
 196:	e2 f7       	brpl	.-8      	; 0x190 <diowritepin+0x72>
 198:	ba 01       	movw	r22, r20
 19a:	60 95       	com	r22
 19c:	62 23       	and	r22, r18
 19e:	68 b9       	out	0x08, r22	; 8
 1a0:	08 95       	ret
		break;
		case'D':
		if (outputvalue ==1 ){
 1a2:	41 30       	cpi	r20, 0x01	; 1
 1a4:	69 f4       	brne	.+26     	; 0x1c0 <diowritepin+0xa2>
		setbit(PORTD,pinnum);
 1a6:	2b b1       	in	r18, 0x0b	; 11
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	ac 01       	movw	r20, r24
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <diowritepin+0x96>
 1b0:	44 0f       	add	r20, r20
 1b2:	55 1f       	adc	r21, r21
 1b4:	6a 95       	dec	r22
 1b6:	e2 f7       	brpl	.-8      	; 0x1b0 <diowritepin+0x92>
 1b8:	ba 01       	movw	r22, r20
 1ba:	62 2b       	or	r22, r18
 1bc:	6b b9       	out	0x0b, r22	; 11
 1be:	08 95       	ret
		}		
		else{
			clearbit(PORTD,pinnum);
 1c0:	2b b1       	in	r18, 0x0b	; 11
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	ac 01       	movw	r20, r24
 1c8:	02 c0       	rjmp	.+4      	; 0x1ce <diowritepin+0xb0>
 1ca:	44 0f       	add	r20, r20
 1cc:	55 1f       	adc	r21, r21
 1ce:	6a 95       	dec	r22
 1d0:	e2 f7       	brpl	.-8      	; 0x1ca <diowritepin+0xac>
 1d2:	ba 01       	movw	r22, r20
 1d4:	60 95       	com	r22
 1d6:	62 23       	and	r22, r18
 1d8:	6b b9       	out	0x0b, r22	; 11
 1da:	08 95       	ret

000001dc <diosetpin>:
				}



void  diosetpin(unsigned char portname ,unsigned char pinnum,unsigned char direction){
	switch(portname)
 1dc:	83 34       	cpi	r24, 0x43	; 67
 1de:	19 f1       	breq	.+70     	; 0x226 <diosetpin+0x4a>
 1e0:	84 34       	cpi	r24, 0x44	; 68
 1e2:	09 f4       	brne	.+2      	; 0x1e6 <diosetpin+0xa>
 1e4:	3d c0       	rjmp	.+122    	; 0x260 <diosetpin+0x84>
 1e6:	82 34       	cpi	r24, 0x42	; 66
 1e8:	09 f0       	breq	.+2      	; 0x1ec <diosetpin+0x10>
 1ea:	56 c0       	rjmp	.+172    	; 0x298 <diosetpin+0xbc>
	{
		case'B':
		
		if (direction == 1 ){
 1ec:	41 30       	cpi	r20, 0x01	; 1
 1ee:	69 f4       	brne	.+26     	; 0x20a <diosetpin+0x2e>
			setbit(DDRB,pinnum);
 1f0:	24 b1       	in	r18, 0x04	; 4
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	ac 01       	movw	r20, r24
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <diosetpin+0x22>
 1fa:	44 0f       	add	r20, r20
 1fc:	55 1f       	adc	r21, r21
 1fe:	6a 95       	dec	r22
 200:	e2 f7       	brpl	.-8      	; 0x1fa <diosetpin+0x1e>
 202:	ba 01       	movw	r22, r20
 204:	62 2b       	or	r22, r18
 206:	64 b9       	out	0x04, r22	; 4
 208:	08 95       	ret
		}
		else{
			clearbit(DDRB,pinnum);
 20a:	24 b1       	in	r18, 0x04	; 4
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	ac 01       	movw	r20, r24
 212:	02 c0       	rjmp	.+4      	; 0x218 <diosetpin+0x3c>
 214:	44 0f       	add	r20, r20
 216:	55 1f       	adc	r21, r21
 218:	6a 95       	dec	r22
 21a:	e2 f7       	brpl	.-8      	; 0x214 <diosetpin+0x38>
 21c:	ba 01       	movw	r22, r20
 21e:	60 95       	com	r22
 220:	62 23       	and	r22, r18
 222:	64 b9       	out	0x04, r22	; 4
 224:	08 95       	ret
			
		}
		break;
		case'C':
		if (direction ==1 ){
 226:	41 30       	cpi	r20, 0x01	; 1
 228:	69 f4       	brne	.+26     	; 0x244 <diosetpin+0x68>
			setbit(DDRC,pinnum);
 22a:	27 b1       	in	r18, 0x07	; 7
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	ac 01       	movw	r20, r24
 232:	02 c0       	rjmp	.+4      	; 0x238 <diosetpin+0x5c>
 234:	44 0f       	add	r20, r20
 236:	55 1f       	adc	r21, r21
 238:	6a 95       	dec	r22
 23a:	e2 f7       	brpl	.-8      	; 0x234 <diosetpin+0x58>
 23c:	ba 01       	movw	r22, r20
 23e:	62 2b       	or	r22, r18
 240:	67 b9       	out	0x07, r22	; 7
 242:	08 95       	ret
		}
		else{
		clearbit(DDRC,pinnum);}
 244:	27 b1       	in	r18, 0x07	; 7
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	ac 01       	movw	r20, r24
 24c:	02 c0       	rjmp	.+4      	; 0x252 <diosetpin+0x76>
 24e:	44 0f       	add	r20, r20
 250:	55 1f       	adc	r21, r21
 252:	6a 95       	dec	r22
 254:	e2 f7       	brpl	.-8      	; 0x24e <diosetpin+0x72>
 256:	ba 01       	movw	r22, r20
 258:	60 95       	com	r22
 25a:	62 23       	and	r22, r18
 25c:	67 b9       	out	0x07, r22	; 7
 25e:	08 95       	ret
		break;
		case'D':
		if (direction ==1 ){
 260:	41 30       	cpi	r20, 0x01	; 1
 262:	69 f4       	brne	.+26     	; 0x27e <diosetpin+0xa2>
			setbit(DDRD,pinnum);
 264:	2a b1       	in	r18, 0x0a	; 10
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	ac 01       	movw	r20, r24
 26c:	02 c0       	rjmp	.+4      	; 0x272 <diosetpin+0x96>
 26e:	44 0f       	add	r20, r20
 270:	55 1f       	adc	r21, r21
 272:	6a 95       	dec	r22
 274:	e2 f7       	brpl	.-8      	; 0x26e <diosetpin+0x92>
 276:	ba 01       	movw	r22, r20
 278:	62 2b       	or	r22, r18
 27a:	6a b9       	out	0x0a, r22	; 10
 27c:	08 95       	ret
		}
		else{
			clearbit(DDRD,pinnum);
 27e:	2a b1       	in	r18, 0x0a	; 10
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	ac 01       	movw	r20, r24
 286:	02 c0       	rjmp	.+4      	; 0x28c <diosetpin+0xb0>
 288:	44 0f       	add	r20, r20
 28a:	55 1f       	adc	r21, r21
 28c:	6a 95       	dec	r22
 28e:	e2 f7       	brpl	.-8      	; 0x288 <diosetpin+0xac>
 290:	ba 01       	movw	r22, r20
 292:	60 95       	com	r22
 294:	62 23       	and	r22, r18
 296:	6a b9       	out	0x0a, r22	; 10
 298:	08 95       	ret

0000029a <dioreadpin>:
	}
}				

unsigned char  dioreadpin(unsigned char portname ,unsigned char pinnum){
	int x=0;
	switch(portname){
 29a:	83 34       	cpi	r24, 0x43	; 67
 29c:	b1 f0       	breq	.+44     	; 0x2ca <dioreadpin+0x30>
 29e:	84 34       	cpi	r24, 0x44	; 68
 2a0:	31 f1       	breq	.+76     	; 0x2ee <dioreadpin+0x54>
 2a2:	82 34       	cpi	r24, 0x42	; 66
 2a4:	b9 f5       	brne	.+110    	; 0x314 <dioreadpin+0x7a>
		case'B':
		x=readbit(PINB,pinnum);
 2a6:	23 b1       	in	r18, 0x03	; 3
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	06 2e       	mov	r0, r22
 2ae:	02 c0       	rjmp	.+4      	; 0x2b4 <dioreadpin+0x1a>
 2b0:	88 0f       	add	r24, r24
 2b2:	99 1f       	adc	r25, r25
 2b4:	0a 94       	dec	r0
 2b6:	e2 f7       	brpl	.-8      	; 0x2b0 <dioreadpin+0x16>
 2b8:	30 e0       	ldi	r19, 0x00	; 0
 2ba:	82 23       	and	r24, r18
 2bc:	93 23       	and	r25, r19
 2be:	02 c0       	rjmp	.+4      	; 0x2c4 <dioreadpin+0x2a>
 2c0:	95 95       	asr	r25
 2c2:	87 95       	ror	r24
 2c4:	6a 95       	dec	r22
 2c6:	e2 f7       	brpl	.-8      	; 0x2c0 <dioreadpin+0x26>
		break;
 2c8:	08 95       	ret
case'C':
x=readbit(PINC,pinnum);
 2ca:	26 b1       	in	r18, 0x06	; 6
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	06 2e       	mov	r0, r22
 2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <dioreadpin+0x3e>
 2d4:	88 0f       	add	r24, r24
 2d6:	99 1f       	adc	r25, r25
 2d8:	0a 94       	dec	r0
 2da:	e2 f7       	brpl	.-8      	; 0x2d4 <dioreadpin+0x3a>
 2dc:	30 e0       	ldi	r19, 0x00	; 0
 2de:	82 23       	and	r24, r18
 2e0:	93 23       	and	r25, r19
 2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <dioreadpin+0x4e>
 2e4:	95 95       	asr	r25
 2e6:	87 95       	ror	r24
 2e8:	6a 95       	dec	r22
 2ea:	e2 f7       	brpl	.-8      	; 0x2e4 <dioreadpin+0x4a>
break;		
 2ec:	08 95       	ret
case'D':
x=readbit(PIND,pinnum);
 2ee:	49 b1       	in	r20, 0x09	; 9
 2f0:	21 e0       	ldi	r18, 0x01	; 1
 2f2:	30 e0       	ldi	r19, 0x00	; 0
 2f4:	06 2e       	mov	r0, r22
 2f6:	02 c0       	rjmp	.+4      	; 0x2fc <dioreadpin+0x62>
 2f8:	22 0f       	add	r18, r18
 2fa:	33 1f       	adc	r19, r19
 2fc:	0a 94       	dec	r0
 2fe:	e2 f7       	brpl	.-8      	; 0x2f8 <dioreadpin+0x5e>
 300:	50 e0       	ldi	r21, 0x00	; 0
 302:	24 23       	and	r18, r20
 304:	35 23       	and	r19, r21
 306:	c9 01       	movw	r24, r18
 308:	02 c0       	rjmp	.+4      	; 0x30e <dioreadpin+0x74>
 30a:	95 95       	asr	r25
 30c:	87 95       	ror	r24
 30e:	6a 95       	dec	r22
 310:	e2 f7       	brpl	.-8      	; 0x30a <dioreadpin+0x70>
break;		
 312:	08 95       	ret
		break;
	}
}				

unsigned char  dioreadpin(unsigned char portname ,unsigned char pinnum){
	int x=0;
 314:	80 e0       	ldi	r24, 0x00	; 0
 316:	90 e0       	ldi	r25, 0x00	; 0
break;		
	}
	return x;
	
	
}
 318:	08 95       	ret

0000031a <diotogglepin>:

void  diotogglepin(unsigned char portname ,unsigned char pinnum){
	
	switch(portname){
 31a:	83 34       	cpi	r24, 0x43	; 67
 31c:	89 f0       	breq	.+34     	; 0x340 <diotogglepin+0x26>
 31e:	84 34       	cpi	r24, 0x44	; 68
 320:	e1 f0       	breq	.+56     	; 0x35a <diotogglepin+0x40>
 322:	82 34       	cpi	r24, 0x42	; 66
 324:	31 f5       	brne	.+76     	; 0x372 <diotogglepin+0x58>
		case'B':
		togglebit(PORTB,pinnum);
 326:	25 b1       	in	r18, 0x05	; 5
 328:	81 e0       	ldi	r24, 0x01	; 1
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	ac 01       	movw	r20, r24
 32e:	02 c0       	rjmp	.+4      	; 0x334 <diotogglepin+0x1a>
 330:	44 0f       	add	r20, r20
 332:	55 1f       	adc	r21, r21
 334:	6a 95       	dec	r22
 336:	e2 f7       	brpl	.-8      	; 0x330 <diotogglepin+0x16>
 338:	ba 01       	movw	r22, r20
 33a:	62 27       	eor	r22, r18
 33c:	65 b9       	out	0x05, r22	; 5
		break;
 33e:	08 95       	ret
		case'C':
		togglebit(PORTC,pinnum);
 340:	28 b1       	in	r18, 0x08	; 8
 342:	81 e0       	ldi	r24, 0x01	; 1
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	ac 01       	movw	r20, r24
 348:	02 c0       	rjmp	.+4      	; 0x34e <diotogglepin+0x34>
 34a:	44 0f       	add	r20, r20
 34c:	55 1f       	adc	r21, r21
 34e:	6a 95       	dec	r22
 350:	e2 f7       	brpl	.-8      	; 0x34a <diotogglepin+0x30>
 352:	ba 01       	movw	r22, r20
 354:	62 27       	eor	r22, r18
 356:	68 b9       	out	0x08, r22	; 8
		break;
 358:	08 95       	ret
		case'D':
		togglebit(PORTD,pinnum);
 35a:	2b b1       	in	r18, 0x0b	; 11
 35c:	81 e0       	ldi	r24, 0x01	; 1
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	ac 01       	movw	r20, r24
 362:	02 c0       	rjmp	.+4      	; 0x368 <diotogglepin+0x4e>
 364:	44 0f       	add	r20, r20
 366:	55 1f       	adc	r21, r21
 368:	6a 95       	dec	r22
 36a:	e2 f7       	brpl	.-8      	; 0x364 <diotogglepin+0x4a>
 36c:	ba 01       	movw	r22, r20
 36e:	62 27       	eor	r22, r18
 370:	6b b9       	out	0x0b, r22	; 11
 372:	08 95       	ret

00000374 <diosetport>:




void  diosetport(unsigned char portname ,unsigned char direction){
	switch(portname)
 374:	83 34       	cpi	r24, 0x43	; 67
 376:	31 f0       	breq	.+12     	; 0x384 <diosetport+0x10>
 378:	84 34       	cpi	r24, 0x44	; 68
 37a:	31 f0       	breq	.+12     	; 0x388 <diosetport+0x14>
 37c:	82 34       	cpi	r24, 0x42	; 66
 37e:	29 f4       	brne	.+10     	; 0x38a <diosetport+0x16>
	{
		case'B':
		DDRB=direction;
 380:	64 b9       	out	0x04, r22	; 4
		break;
 382:	08 95       	ret
		case'C':
		DDRB=direction;
 384:	64 b9       	out	0x04, r22	; 4
		break;
 386:	08 95       	ret
		case'D':
		DDRD=direction;
 388:	6a b9       	out	0x0a, r22	; 10
 38a:	08 95       	ret

0000038c <diowriteport>:
	}		
		
		
}
void  diowriteport(unsigned char portname ,unsigned char outputvalue){
	switch(portname)
 38c:	83 34       	cpi	r24, 0x43	; 67
 38e:	31 f0       	breq	.+12     	; 0x39c <diowriteport+0x10>
 390:	84 34       	cpi	r24, 0x44	; 68
 392:	31 f0       	breq	.+12     	; 0x3a0 <diowriteport+0x14>
 394:	82 34       	cpi	r24, 0x42	; 66
 396:	29 f4       	brne	.+10     	; 0x3a2 <diowriteport+0x16>
	{
		case'B':
		PORTB=outputvalue;
 398:	65 b9       	out	0x05, r22	; 5
		break;
 39a:	08 95       	ret
		case'C':
		PORTC=outputvalue;
 39c:	68 b9       	out	0x08, r22	; 8
		break;
 39e:	08 95       	ret
		case'D':
		PORTD=outputvalue;
 3a0:	6b b9       	out	0x0b, r22	; 11
 3a2:	08 95       	ret

000003a4 <dioreadport>:



unsigned char  dioreadport(unsigned char portname ){
	int y=0;
	switch(portname)
 3a4:	83 34       	cpi	r24, 0x43	; 67
 3a6:	31 f0       	breq	.+12     	; 0x3b4 <dioreadport+0x10>
 3a8:	84 34       	cpi	r24, 0x44	; 68
 3aa:	31 f0       	breq	.+12     	; 0x3b8 <dioreadport+0x14>
 3ac:	82 34       	cpi	r24, 0x42	; 66
 3ae:	31 f4       	brne	.+12     	; 0x3bc <dioreadport+0x18>
	{
		case'B':
		y=PINB;
 3b0:	83 b1       	in	r24, 0x03	; 3
		break;
 3b2:	08 95       	ret
		case'C':
	    y=PINC;
 3b4:	86 b1       	in	r24, 0x06	; 6
		break;
 3b6:	08 95       	ret
		case'D':
		y=PIND;
 3b8:	89 b1       	in	r24, 0x09	; 9
		break;
 3ba:	08 95       	ret




unsigned char  dioreadport(unsigned char portname ){
	int y=0;
 3bc:	80 e0       	ldi	r24, 0x00	; 0
 3be:	90 e0       	ldi	r25, 0x00	; 0
		break;
		
	}
	return y;		
		
	}
 3c0:	08 95       	ret

000003c2 <ledset>:
 *  Author: hp-ht
 */ 

#include "dio.h"
void ledset(unsigned char portname,unsigned char pinnum){
	diosetpin(portname,pinnum,1);
 3c2:	41 e0       	ldi	r20, 0x01	; 1
 3c4:	0e 94 ee 00 	call	0x1dc	; 0x1dc <diosetpin>
}
 3c8:	08 95       	ret

000003ca <ledturnon>:
void ledturnon(unsigned char portname ,unsigned char pinnum){
	
	diowritepin(portname,pinnum,1);
 3ca:	41 e0       	ldi	r20, 0x01	; 1
 3cc:	0e 94 8f 00 	call	0x11e	; 0x11e <diowritepin>
	
}
 3d0:	08 95       	ret

000003d2 <ledturnoff>:
void ledturnoff(unsigned char portname ,unsigned char pinnum){
	
	diowritepin(portname,pinnum,0);
 3d2:	40 e0       	ldi	r20, 0x00	; 0
 3d4:	0e 94 8f 00 	call	0x11e	; 0x11e <diowritepin>
}
 3d8:	08 95       	ret

000003da <ledtoggle>:
void ledtoggle (unsigned char portname , unsigned char pinnum){
	diotogglepin(portname,pinnum);
 3da:	0e 94 8d 01 	call	0x31a	; 0x31a <diotogglepin>
}
 3de:	08 95       	ret

000003e0 <ledread>:
unsigned char ledread(unsigned char portname,unsigned char pinnum){
 3e0:	68 2f       	mov	r22, r24
	int z;
	z=dioreadpin(portname,portname);//note: here dio has return value but it not effective cuz i call function in another function so i must create new return in thenew function
 3e2:	0e 94 4d 01 	call	0x29a	; 0x29a <dioreadpin>
	return z;
 3e6:	08 95       	ret

000003e8 <main>:
#include "dio.h"

int main(void)
{//intialization , directions and code u wanna run it for one time must be written before while 1
 //code u wanna repeat it must be written after while 1	
	diosetport('D',0xff);
 3e8:	84 e4       	ldi	r24, 0x44	; 68
 3ea:	6f ef       	ldi	r22, 0xFF	; 255
 3ec:	0e 94 ba 01 	call	0x374	; 0x374 <diosetport>
	
	
    while(1)
    {
		diowriteport('D',0xff);
 3f0:	84 e4       	ldi	r24, 0x44	; 68
 3f2:	6f ef       	ldi	r22, 0xFF	; 255
 3f4:	0e 94 c6 01 	call	0x38c	; 0x38c <diowriteport>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3f8:	8f e3       	ldi	r24, 0x3F	; 63
 3fa:	9d e0       	ldi	r25, 0x0D	; 13
 3fc:	a3 e0       	ldi	r26, 0x03	; 3
 3fe:	81 50       	subi	r24, 0x01	; 1
 400:	90 40       	sbci	r25, 0x00	; 0
 402:	a0 40       	sbci	r26, 0x00	; 0
 404:	e1 f7       	brne	.-8      	; 0x3fe <main+0x16>
 406:	00 c0       	rjmp	.+0      	; 0x408 <main+0x20>
 408:	00 00       	nop
		_delay_ms(1000);
		int x=dioreadport('D');
 40a:	84 e4       	ldi	r24, 0x44	; 68
 40c:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <dioreadport>
 410:	c8 2f       	mov	r28, r24
 412:	8f e7       	ldi	r24, 0x7F	; 127
 414:	9a e1       	ldi	r25, 0x1A	; 26
 416:	a6 e0       	ldi	r26, 0x06	; 6
 418:	81 50       	subi	r24, 0x01	; 1
 41a:	90 40       	sbci	r25, 0x00	; 0
 41c:	a0 40       	sbci	r26, 0x00	; 0
 41e:	e1 f7       	brne	.-8      	; 0x418 <main+0x30>
 420:	00 c0       	rjmp	.+0      	; 0x422 <main+0x3a>
 422:	00 00       	nop
		_delay_ms(2000);
		diowriteport('D',0x00);
 424:	84 e4       	ldi	r24, 0x44	; 68
 426:	60 e0       	ldi	r22, 0x00	; 0
 428:	0e 94 c6 01 	call	0x38c	; 0x38c <diowriteport>
		diowriteport('C',x);
 42c:	83 e4       	ldi	r24, 0x43	; 67
 42e:	6c 2f       	mov	r22, r28
 430:	0e 94 c6 01 	call	0x38c	; 0x38c <diowriteport>
 434:	dd cf       	rjmp	.-70     	; 0x3f0 <main+0x8>

00000436 <_exit>:
 436:	f8 94       	cli

00000438 <__stop_program>:
 438:	ff cf       	rjmp	.-2      	; 0x438 <__stop_program>
